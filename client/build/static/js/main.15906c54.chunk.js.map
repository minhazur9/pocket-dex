{"version":3,"sources":["actions/index.js","components/Navbar.js","images/pokemon-artworks/front1.jpg","images/pokemon-artworks/front2.jpg","images/pokemon-artworks/front3.jpg","images/icons/pokedex-icon.png","images/icons/lugia-icon.png","pages/Home.js","components/Loading.js","images/types/bug.png","images/types/dark.png","images/types/dragon.png","images/types/electric.png","images/types/fairy.png","images/types/fighting.png","images/types/fire.png","images/types/flying.png","images/types/ghost.png","images/types/grass.png","images/types/ground.png","images/types/ice.png","images/types/normal.png","images/types/poison.png","images/types/psychic.png","images/types/rock.png","images/types/steel.png","images/types/water.png","components/tables/TypeTable.js","options/options.js","calculations/pokemonStats.js","components/pokemon/StatChart.js","components/pokemon/MoveSetList.js","components/pokemon/EvolutionChain.js","components/pokemon/AlternativeForms.js","components/pokemon/PokemonInfo.js","pages/PokemonIndex.js","images/types/shadow.png","images/damage_classes/physical.png","images/damage_classes/special.png","images/damage_classes/status.png","components/moves/MoveInfo.js","pages/MoveIndex.js","components/abilities/PokemonList.js","components/abilities/AbilityInfo.js","pages/AbilityIndex.js","components/items/ItemInfo.js","pages/ItemIndex.js","queries/accountQueries.js","queries/teamQueries.js","pages/SignUp.js","pages/Login.js","components/teams/TeamPokemonInfo.js","pages/TeamIndex.js","pages/Forbidden.js","config/routes.js","App.js","reportWebVitals.js","reducers/pokemonReducer.js","reducers/infoReducer.js","reducers/loadingReducer.js","reducers/speciesReducer.js","reducers/movesReducer.js","reducers/moveInfoReducer.js","reducers/evolutionChainReducer.js","reducers/abilitiesReducer.js","reducers/abilityInfoReducer.js","reducers/itemsReducer.js","reducers/itemInfoReducer.js","reducers/LoggedInReducer.js","reducers/teamPokemonInfoReducer.js","reducers/index.js","store/index.js","index.js"],"names":["getPokemon","dispatch","cachedData","localStorage","getItem","axios","get","then","response","type","payload","data","results","dataString","JSON","stringify","setItem","catch","error","parse","getInfo","name","getSpeciesInfo","getMoveInfo","move","getEvolutionChain","endpoint","chain","getAbilityInfo","ability","getItems","getItemInfo","item","Navbar","loggedIn","useSelector","state","useDispatch","history","useHistory","signOut","date","Date","setTime","getTime","document","cookie","toUTCString","push","className","to","onClick","querySelector","style","display","id","dropdown","animationName","Home","options","duration","height","indicators","interval","image","alt","src","front1","front2","front3","pokedexIcon","lugiaIcon","renderLoading","typeTable","bug","icon","color","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","poison","psychic","rock","steel","water","natures","itemOptions","list","map","value","label","toUpperCase","moveOptions","info","moves","entry","abilityOptions","abilities","getNatureModifier","nature","statId","natureMod","natureId","indexOf","col","Math","floor","StatChart","props","base","iv","ev","level","max","hp","atk","def","spAtk","spDef","speed","stats","base_stat","ivs","evs","Number","baseStats","otherStats","i","length","calculateOtherStats","width","useEffect","getElementById","innerHTML","container","categories","series","window","innerWidth","chart","xAxis","min","legend","visible","plot","showLine","showLabel","chartExportMenu","barChart","renderChart","MoveSetList","updateMoveState","moveName","a","getMethod","version","version_group_details","method","move_learn_method","level_learned_at","moveSet","learnMethod","index","replace","renderMoveSet","EvolutionChain","speciesInfo","evolutionChain","updatePokemonState","e","pokemonName","imageNameFormatter","renderEvolutionMethod","stage","text","evolution_chain","url","species","evolves_to","faArrowRight","faArrowDown","renderFirstStage","renderChain","evolution_details","AlternativeForms","varieties","form","pokemon","captionName","includes","temp","split","join","nameFormatter","PokemonInfo","loading","renderSprites","frontShiny","frontSprite","updateAbilityState","abilityName","renderPokemonId","renderFlavorText","flavor_text_entries","chosenText","forEach","flavor","language","flavor_text","backgroundColor","types","word","charAt","substr","renderAllInfo","PokemonIndex","select","highlight","updateInfo","target","classList","contains","querySelectorAll","button","remove","toggle","onKeyUp","toLowerCase","keyCode","htmlFor","listNameFormatter","MoveInfo","moveInfo","shadow","damageClassTable","physical","special","status","renderType","renderDamageClass","damageClass","renderPP","pp","renderMovePower","power","renderMoveAccuracy","accuracy","renderPriority","priority","renderMoveText","renderMoveDetails","details","effect_entries","effect","effect_chance","MoveIndex","highight","PokemonList","abilityInfo","renderImage","formattedName","is_hidden","toString","AbilityInfo","renderEffectText","AbilityIndex","ItemInfo","itemInfo","renderSprite","sprites","default","renderFlingPower","fling_power","renderCategory","category","ItemIndex","items","itemName","addUserMutation","gql","tokenAuthMutation","addTeamMutation","getTeamsQuery","editTeamMutation","editPokemonMutation","getPokemonQuery","deleteTeamMutation","require","config","path","SignUp","useMutation","onCompleted","addUser","token","setDuplicateUser","setDuplicateEmail","setInvalidEmail","storeToken","sendWelcomeEmail","addTeam","useState","username","setUsername","email","setEmail","password","setPassword","confirm","setConfirm","blankUsername","setBlankUsername","blankPassword","setBlankPassword","blankEmail","setBlankEmail","invalidEmail","duplicateUser","duplicateEmail","variables","userId","getCookie","refetchQueries","query","templateParams","to_email","to_name","emailjs","send","submitForm","preventDefault","passwordVerificationError","onSubmit","onFocus","onChange","Login","invalidcredentials","setInvalidCredientials","tokenAuth","fontSize","TeamPokemonInfo","teamPokemonInfo","pokemonList","itemList","setPokemon","setLevel","setNature","setAbility","moveset","setMoveset","setIVs","setEVs","editPokemon","evCount","setEvCount","sum","sumEvs","setIVState","stat","ivCopy","slice","setEVState","evCopy","console","log","reduce","count","currentEv","option","isSearchable","onBlur","isMulti","pop","handleMovesetChange","TeamIndex","pokemonId","setPokemonId","teamName","setTeamName","editTeam","deleteTeam","useQuery","useLazyQuery","handleDeleteTeam","handlePokemonSelect","renderPokemonList","editTeamInfo","allTeamsByUser","team","defaultValue","currentTarget","faTrashAlt","renderExistingTeams","defaultName","Forbidden","Routes","exact","component","find","test","client","ApolloClient","uri","fetchOptions","credentials","headers","authorization","App","currentTime","localTime","parseInt","removeItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","pokemonReducer","action","foundPokemon","allPokemon","regexp","RegExp","match","infoReducer","loadingReducer","speciesReducer","movesReducer","foundMoves","allMoves","moveInfoReducer","evolutionChainReducer","abilitesReducer","foundAbility","allAbilities","abilityInfoReducer","itemsReducer","foundItem","allItems","itemInfoReducer","teamPokemonReducer","allReducers","combineReducers","loggedInReducer","teamPokemonInfoReducer","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render"],"mappings":"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","file":"static/js/main.15906c54.chunk.js","sourcesContent":["import axios from 'axios';\n\n// Pokemon Endpoint\nconst pokemonListURL = 'https://pokeapi.co/api/v2/pokemon?limit=893';\nconst pokemonInfoURL = 'https://pokeapi.co/api/v2/pokemon/';\nconst speciesInfoURL = 'https://pokeapi.co/api/v2/pokemon-species/';\nconst movesListURL = 'https://pokeapi.co/api/v2/move?limit=813';\nconst moveInfoURL = 'https://pokeapi.co/api/v2/move/';\nconst abilityListURL = 'https://pokeapi.co/api/v2/ability?limit=327';\nconst abilityInfoURL = 'https://pokeapi.co/api/v2/ability/';\nconst itemListURL = 'https://pokeapi.co/api/v2/item?limit=954';\nconst itemInfoURL = 'https://pokeapi.co/api/v2/item/';\n\n\n// get all pokemon from api\nexport const getPokemon = () => {\n    return (dispatch) => {\n        const cachedData = localStorage.getItem('pokemon-list-data')\n        if (cachedData) {\n            dispatch({\n                type: 'POKEMON_LIST_DATA',\n                payload: JSON.parse(cachedData)\n            })\n        }\n        else {\n            return axios.get(pokemonListURL)\n                .then((response) => {\n                    dispatch({\n                        type: 'POKEMON_LIST_DATA',\n                        payload: response.data.results\n                    })\n                    const dataString = JSON.stringify(response.data.results)\n                    localStorage.setItem('pokemon-list-data', dataString)\n                })\n                .catch(error => {\n                    throw (error);\n                });\n        }\n\n    };\n};\n\n// get information of a pokemon from api\nexport const getInfo = (name) => {\n    return (dispatch) => {\n        return axios.get(pokemonInfoURL + name)\n            .then((response) => {\n                dispatch({\n                    type: 'POKEMON_INFO_DATA',\n                    payload: response.data\n                })\n            })\n    }\n}\n\n// get species information of a pokemon from api\nexport const getSpeciesInfo = (name) => {\n    return (dispatch) => {\n        return axios.get(speciesInfoURL + name)\n            .then((response) => {\n                dispatch({\n                    type: 'POKEMON_SPECIES_DATA',\n                    payload: response.data\n                })\n            })\n    }\n}\n\n// search for the pokemon\nexport const searchPokemon = (term) => {\n    return {\n        type: 'POKEMON_SEARCH_DATA',\n        payload: term\n    }\n}\n\n// get all moves from the api\nexport const getMoves = () => {\n    return (dispatch) => {\n        const cachedData = localStorage.getItem('moves-data');\n        if (cachedData) {\n            dispatch({\n                type: 'MOVES_LIST_DATA',\n                payload: JSON.parse(cachedData)\n            })\n        }\n        else {\n            axios.get(movesListURL)\n                .then((response) => {\n                    dispatch({\n                        type: 'MOVES_LIST_DATA',\n                        payload: response.data.results\n                    })\n                    const dataString = JSON.stringify(response.data.results)\n                    localStorage.setItem('moves-data', dataString)\n                })\n                .catch((error) => {\n                    throw (error);\n                })\n        }\n    }\n}\n\n// get information of a move from the api\nexport const getMoveInfo = (move) => {\n    return (dispatch) => {\n        return axios.get(moveInfoURL + move)\n            .then((response) => {\n                dispatch({\n                    type: 'MOVE_INFO_DATA',\n                    payload: response.data\n                })\n            })\n    }\n}\n\n// search from all moves\nexport const searchMoves = (term) => {\n    return {\n        type: 'MOVES_SEARCH_DATA',\n        payload: term\n    }\n}\n\n// get the evolution chain of a pokemon from the api\nexport const getEvolutionChain = (endpoint) => {\n    return (dispatch) => {\n        return axios.get(endpoint)\n            .then((response) => {\n                dispatch({\n                    type: 'POKEMON_EVOLUTION_DATA',\n                    payload: response.data.chain,\n                })\n            })\n    }\n}\n\n\n// get all abilites from the api\nexport const getAbilities = () => {\n    return (dispatch) => {\n        const cachedData = localStorage.getItem('abilities-data');\n        if (cachedData) {\n            dispatch({\n                type: 'ABILITY_LIST_DATA',\n                payload: JSON.parse(cachedData)\n            })\n        }\n        else {\n            return axios.get(abilityListURL)\n                .then((response) => {\n                    dispatch({\n                        type: 'ABILITY_LIST_DATA',\n                        payload: response.data.results,\n                    })\n                    const dataString = JSON.stringify(response.data.results)\n                    localStorage.setItem('abilities-data', dataString)\n                })\n                .catch((error) => {\n                    throw error;\n                })\n        }\n    }\n}\n\n// search through all abilities\nexport const searchAbilities = (term) => {\n    return {\n        type: 'ABILITY_SEARCH_DATA',\n        payload: term,\n    }\n}\n\n// get information of an ability from the api\nexport const getAbilityInfo = (ability) => {\n    return (dispatch) => {\n        axios.get(abilityInfoURL + ability)\n            .then((response) => {\n                dispatch({\n                    type: 'ABILITY_INFO_DATA',\n                    payload: response.data,\n                })\n            })\n    }\n\n}\n\n// get all items from the api\nexport const getItems = () => {\n    const cachedData = localStorage.getItem('items-data');\n    return (dispatch) => {\n        if (cachedData) {\n            dispatch({\n                type: 'ITEM_LIST_DATA',\n                payload: JSON.parse(cachedData)\n            })\n        }\n        else {\n            axios.get(itemListURL)\n                .then((response) => {\n                    dispatch({\n                        type: 'ITEM_LIST_DATA',\n                        payload: response.data.results\n                    })\n                    const dataString = JSON.stringify(response.data.results);\n                    localStorage.setItem('items-data', dataString)\n                })\n                .catch((error) => {\n                    throw error;\n                })\n        }\n    }\n}\n\n// get information of an item from the api\nexport const getItemInfo = (item) => {\n    return (dispatch) => {\n        axios.get(itemInfoURL + item)\n            .then((response) => {\n                dispatch({\n                    type: 'ITEM_INFO_DATA',\n                    payload: response.data\n                })\n            }\n            )\n\n    }\n}\n\n// search from all the items\nexport const searchItems = (term) => {\n    return {\n        type: 'ITEM_SEARCH_DATA',\n        payload: term,\n    }\n}\n\n// start loading\nexport const startLoading = () => {\n    return {\n        type: 'START_LOADING'\n    }\n}\n\n// stop loading\nexport const stopLoading = () => {\n    return {\n        type: 'STOP_LOADING'\n    }\n}\n\n// login user\nexport const logIn = () => {\n    return {\n        type: 'LOG_IN'\n    }\n}\n\n// logout user\nexport const logOut = () => {\n    return {\n        type: 'LOG_OUT'\n    }\n}\n\n// get pokemon information from a team\nexport const getTeamPokemonInfo = (info) => {\n    return {\n        type: 'TEAM_POKEMON_INFO_DATA',\n        payload: info\n    }\n}\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { logOut } from '../actions';\n\nconst Navbar = () => {\n\n  const loggedIn = useSelector(state => state.loggedIn)\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  // Signs the user out\n  const signOut = () => {\n    const date = new Date();\n    date.setTime(date.getTime() - 1000 * 60);\n    document.cookie = `jwtToken=; Path=/; expires=${date.toUTCString()}`;\n    dispatch(logOut())\n    history.push('/')\n  }\n\n  // Render the signout button\n  const renderSignout = () => {\n    return (\n      <>\n        <li className='nav-link' onClick={signOut}><Link to=\"/\" className=\"nav-link\">Logout</Link></li>\n      </>\n    )\n  }\n\n  // Renders the buttons that only logged in users can use on desktop\n  const renderDesktopAccountControls = () => {\n    return (\n      <>\n        <li><Link to=\"/teams\" className=\"nav-link teams-button\">My Teams</Link></li>\n      </>\n    )\n  }\n\n  // Renders the signup and login buttons for desktop\n  const renderDesktopAccountLinks = () => {\n    return (\n      <>\n        <li><Link to=\"/signup\" className=\"nav-link\">Signup</Link></li>\n        <li><Link to=\"/login\" className=\"nav-link\">Login</Link></li>\n      </>\n    )\n  }\n\n\n  // Renders the buttons than only logged in users can use on mobile\n  const renderMobileAccountControls = () => {\n    return (\n      <>\n        <Link to=\"/teams\" onClick={() => document.querySelector(\".dropdown\").style.display = \"none\"} className=\"mobile-nav-link\"><li>My Teams</li></Link>\n        <Link to=\"/\" onClick={() => {\n          document.querySelector(\".dropdown\").style.display = \"none\"\n          signOut()\n        }}\n          className=\"mobile-nav-link\"><li>Logout</li></Link>\n      </>\n    )\n  }\n\n  // Renders the signup and login buttons for mobile\n  const renderMobileAccountLinks = () => {\n    return (\n      <>\n        <Link to=\"/signup\" onClick={() => document.querySelector(\".dropdown\").style.display = \"none\"} className=\"mobile-nav-link\"><li>Signup</li></Link>\n        <Link to=\"/login\" onClick={() => document.querySelector(\".dropdown\").style.display = \"none\"} className=\"mobile-nav-link\"><li>Login</li></Link>\n      </>\n    )\n  }\n\n  // Toggles dropdown menu\n  const dropdown = () => {\n    const dropdown = document.querySelector('.dropdown');\n    if (dropdown.style.display === 'none' || !dropdown.style.display) {\n      dropdown.style.animationName = 'slideDown'\n      dropdown.style.display = 'block'\n    }\n    else {\n      dropdown.style.display = 'none'\n    }\n  }\n\n  return (\n    <nav>\n      <div className=\"nav-wrapper red\">\n        <Link to=\"/\" onClick={() => document.querySelector('.dropdown').style.display = 'none'} className=\"brand-logo left\">PocketDex</Link>\n        <ul id=\"nav-mobile\" className=\"right\">\n          <li><Link to=\"/pokemon\" className=\"nav-link\">PokeDex</Link></li>\n          <li><Link to=\"/moves\" className=\"nav-link\">MoveDex</Link></li>\n          <li><Link to=\"/abilities\" className=\"nav-link\">AbilityDex</Link></li>\n          <li><Link to=\"/items\" className=\"nav-link\">ItemDex</Link></li>\n          {loggedIn ? renderSignout() : renderDesktopAccountLinks()}\n        </ul>\n        <ul id=\"nav-mobile\" className=\"left\">\n          {loggedIn && renderDesktopAccountControls()}\n          {/* <li><Link to=\"/damagecalc\" className=\"nav-link\">Damage Calculator</Link></li> */}\n        </ul>\n        <button onClick={dropdown} className=\"hamburger-menu\">\n          <div></div>\n          <div></div>\n          <div></div>\n        </button>\n      </div>\n      <ul className=\"dropdown\">\n        <Link to=\"/pokemon\" onClick={() => document.querySelector(\".dropdown\").style.display = \"none\"} className=\"mobile-nav-link\"><li>PokeDex</li></Link>\n        <Link to=\"/moves\" onClick={() => document.querySelector(\".dropdown\").style.display = \"none\"} className=\"mobile-nav-link\"><li>MoveDex</li></Link>\n        <Link to=\"/abilities\" onClick={() => document.querySelector(\".dropdown\").style.display = \"none\"} className=\"mobile-nav-link\"><li>AbilityDex</li></Link>\n        <Link to=\"/items\" onClick={() => document.querySelector(\".dropdown\").style.display = \"none\"} className=\"mobile-nav-link\"><li>ItemDex</li></Link>\n        {loggedIn ? renderMobileAccountControls() : renderMobileAccountLinks()}\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navbar;","export default __webpack_public_path__ + \"static/media/front1.29221486.jpg\";","export default __webpack_public_path__ + \"static/media/front2.7100e1d1.jpg\";","export default __webpack_public_path__ + \"static/media/front3.ed3ae157.jpg\";","export default __webpack_public_path__ + \"static/media/pokedex-icon.215b9167.png\";","export default __webpack_public_path__ + \"static/media/lugia-icon.7687beac.png\";","import React from 'react';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport { Slider, Slide } from 'react-materialize';\nimport front1 from '../images/pokemon-artworks/front1.jpg';\nimport front2 from '../images/pokemon-artworks/front2.jpg';\nimport front3 from '../images/pokemon-artworks/front3.jpg';\nimport pokedexIcon from '../images/icons/pokedex-icon.png';\nimport lugiaIcon from '../images/icons/lugia-icon.png';\n\nconst Home = () => {\n\n  // render info about the application\n  const renderInfo = () => {\n    return (\n      <ul className=\"about\">\n        <li>\n          <h4>The Dexes</h4>\n          <p className=\"desc\">\n            Pokemon, Moves, Abilities, and Items! You can search and find information about all of them\n          </p>\n          <img src={pokedexIcon} className=\"pokedex-icon\" alt=\"pokedex\"/>\n        </li>\n        <li>\n          <h4>Teams</h4>\n          <p className=\"desc\">\n            Create your own teams, set up your pokemon's levels, their abilities, their IVs, EVs, and items!\n          </p>\n          <img src={lugiaIcon} className=\"lugia-icon\" alt=\"pokemon\"/>\n        </li>\n      </ul>\n    )\n  }\n\n  // renders the slider for the pictures\n  const renderSlider = () => {\n    return (\n      <>\n        <Slider\n          options={{\n            duration: 500,\n            height: 470,\n            indicators: true,\n            interval: 6000\n          }}\n        >\n          <Slide image={<img alt=\"front1\" src={front1} />}></Slide>\n          <Slide image={<img alt=\"front2\" src={front2} />}></Slide>\n          <Slide image={<img alt=\"front3\" src={front3} />}></Slide>\n        </Slider>\n      </>\n    )\n  }\n\n  return (\n    <div className=\"home\">\n      {renderSlider()}\n      {renderInfo()}\n    </div>\n  );\n}\n\nexport default Home;\n","export const renderLoading = () => {\n    return (\n        <>\n            <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/bug.868c0137.png\";","export default __webpack_public_path__ + \"static/media/dark.fe40987c.png\";","export default __webpack_public_path__ + \"static/media/dragon.5fb4095a.png\";","export default __webpack_public_path__ + \"static/media/electric.e9c55550.png\";","export default __webpack_public_path__ + \"static/media/fairy.70b05b3a.png\";","export default __webpack_public_path__ + \"static/media/fighting.6eefeb25.png\";","export default __webpack_public_path__ + \"static/media/fire.450abcb6.png\";","export default __webpack_public_path__ + \"static/media/flying.697281cc.png\";","export default __webpack_public_path__ + \"static/media/ghost.234e621a.png\";","export default __webpack_public_path__ + \"static/media/grass.7d5a4634.png\";","export default __webpack_public_path__ + \"static/media/ground.21689b22.png\";","export default __webpack_public_path__ + \"static/media/ice.82a0b178.png\";","export default __webpack_public_path__ + \"static/media/normal.828edca1.png\";","export default __webpack_public_path__ + \"static/media/poison.df30114d.png\";","export default __webpack_public_path__ + \"static/media/psychic.019dc419.png\";","export default __webpack_public_path__ + \"static/media/rock.02a5f105.png\";","export default __webpack_public_path__ + \"static/media/steel.50343da7.png\";","export default __webpack_public_path__ + \"static/media/water.c401a70e.png\";","import bug from '../../images/types/bug.png'\nimport dark from '../../images/types/dark.png'\nimport dragon from '../../images/types/dragon.png'\nimport electric from '../../images/types/electric.png'\nimport fairy from '../../images/types/fairy.png'\nimport fighting from '../../images/types/fighting.png'\nimport fire from '../../images/types/fire.png'\nimport flying from '../../images/types/flying.png'\nimport ghost from '../../images/types/ghost.png'\nimport grass from '../../images/types/grass.png'\nimport ground from '../../images/types/ground.png'\nimport ice from '../../images/types/ice.png'\nimport normal from '../../images/types/normal.png'\nimport poison from '../../images/types/poison.png'\nimport psychic from '../../images/types/psychic.png'\nimport rock from '../../images/types/rock.png'\nimport steel from '../../images/types/steel.png'\nimport water from '../../images/types/water.png'\n\n\n// Hash table for converting pokemon type strings to image\nexport const typeTable = {\n    bug: {\n        icon: bug,\n        color: '#9DAC19'\n    },\n    dark: {\n        icon: dark,\n        color: '#3C2D23'\n    },\n    dragon: {\n        icon: dragon,\n        color: '#7059D8'\n    },\n    electric: {\n        icon: electric,\n        color: '#E79302'\n    },\n    fairy: {\n        icon: fairy,\n        color: '#F4B1F4'\n    },\n    fighting: {\n        icon: fighting,\n        color: '#7F331C'\n    },\n    fire: {\n        icon: fire,\n        color: '#DC3207'\n    },\n    flying: {\n        icon: flying,\n        color: '#93A4F1'\n    },\n    ghost: {\n        icon: ghost,\n        color: '#3F3F86'\n    },\n    grass: {\n        icon: grass,\n        color: '#389A02'\n    },\n    ground: {\n        icon: ground,\n        color: '#CFAE54'\n    },\n    ice: {\n        icon: ice,\n        color: '#6DD3F5'\n    },\n    normal: {\n        icon: normal,\n        color: '#B7B1A3'\n    },\n    poison: {\n        icon: poison,\n        color: '#974A98'\n    },\n    psychic: {\n        icon: psychic,\n        color: '#EB4680'\n    },\n    rock: {\n        icon: rock,\n        color: '#9F883E'\n    },\n    steel: {\n        icon: steel,\n        color: '#8F8FA0'\n    },\n    water: {\n        icon: water,\n        color: '#3294F7'\n    },\n}","// list of pokemon natures\nexport const natures = [\n    'hardy',\n    'lonely',\n    'adamant',\n    'naughty',\n    'brave',\n    'bold',\n    'docile',\n    'impish',\n    'lax',\n    'relaxed',\n    'modest',\n    'mild',\n    'bashful',\n    'rash',\n    'quiet',\n    'calm',\n    'gentle',\n    'careful',\n    'quirky',\n    'sassy',\n    'timid',\n    'hasty',\n    'jolly',\n    'naive',\n    'serious'\n]\n\n// renders all pokemon\nexport const pokemonOptions = (list) => {\n    return list.map((pokemon) => {\n        const { name } = pokemon;\n        return { value: name, label: name.toUpperCase() }\n    })\n}\n\n// render all items\nexport const itemOptions = (list) => {\n    return list.map((item) => {\n        const { name } = item;\n        return { value: name, label: name.toUpperCase() }\n    })\n}\n\n// renders all moves\nexport const moveOptions = (info) => {\n    const { moves } = info;\n    return moves.map((entry) => {\n        const { name } = entry.move;\n        return { value: name, label: name.toUpperCase() }\n    })\n}\n\n// renders all natures\nexport const natureOptions = () => {\n    return natures.map((nature) => {\n        return { value: nature, label: nature.toUpperCase() }\n    })\n}\n\n// renders all abilities\nexport const abilityOptions = (info) => {\n    let abilities = [];\n    if (info) abilities = info.abilities;\n    return abilities.map((entry) => {\n        const { name } = entry.ability;\n        return { value: name, label: name.toUpperCase() }\n    })\n}\n","import { natures } from '../options/options';\n\n// Calculate HP Stat\nexport const calculateHP = (base, iv, ev, level) => {\n    return Math.floor((((2 * base + iv + (ev / 4)) * Number(level)) / 100) + Number(level) + 10);\n}\n\n// Determines the modifier of the stat depending on the nature\nconst getNatureModifier = (nature, statId) => {\n    let natureMod = 1;\n    const natureId = natures.indexOf(nature)\n    const col = natureId % 5\n    const row = Math.floor(natureId/5)\n    if (statId === row) natureMod += 0.1;\n    if (statId === col) natureMod -= 0.1;\n    return natureMod\n}\n\n// Calculates all other stats\nexport const calculateOtherStats = (baseStats, ivs, evs, level, nature) => {\n    const otherStats = [];\n    for (let i = 1; i < baseStats.length; i++) {\n        const natureMod = getNatureModifier(nature, i - 1);\n        otherStats.push(Math.floor(((((2 * baseStats[i].base_stat + ivs[i] + (evs[i] / 4)) * Number(level)) / 100) + 5) * natureMod ))\n    }\n    return otherStats;\n}\n\n\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { calculateHP, calculateOtherStats } from '../../calculations/pokemonStats';\nimport chart from 'tui-chart';\n\n\nconst StatChart = (props) => {\n    const info = useSelector((state => state.info));\n    let max = 250;\n    let hp = 0;\n    let atk = 0;\n    let def = 0;\n    let spAtk = 0;\n    let spDef = 0;\n    let speed = 0;\n    const { stats } = info;\n    if (props.level) {\n        hp = calculateHP(stats[0].base_stat, props.ivs[0], props.evs[0], props.level)\n        const baseStats = calculateOtherStats(stats, props.ivs, props.evs, props.level, props.nature)\n        atk = baseStats[0];\n        def = baseStats[1];\n        spAtk = baseStats[2];\n        spDef = baseStats[3];\n        speed = baseStats[4];\n        max = 715;\n    }\n    else {\n        hp = stats[0].base_stat;\n        atk = stats[1].base_stat;\n        def = stats[2].base_stat;\n        spAtk = stats[3].base_stat;\n        spDef = stats[4].base_stat;\n        speed = stats[5].base_stat;\n    }\n    let height = props.height;\n    let width = props.width;\n\n    // Renders a bar chart\n    const renderChart = () => {\n        const container = document.getElementById('chart-area');\n        const data = {\n            categories: ['HP', 'Attack', 'Defense', 'Sp.Atk', 'Sp.Def', 'Speed'],\n            series: [\n                {\n                    data: [hp, atk, def, spAtk, spDef, speed]\n                },\n            ]\n        };\n        if (window.innerWidth <= 900) {\n            height = 240;\n            width = 200;\n        }\n        if (window.innerWidth <= 850) {\n            height = 180;\n            width = 180;\n        }\n        if (window.innerWidth <= 550) {\n            height = 165;\n            width = 165;\n        }\n        const options = {\n            chart: {\n                width: width,\n                height: height\n            },\n            xAxis: {\n                min: 0,\n                max: max\n            },\n            legend: {\n                visible: false\n            },\n            plot: {\n                showLine: false\n            },\n            series: {\n                showLabel: true\n            },\n            chartExportMenu: {\n                visible: false\n            },\n        };\n        chart.barChart(container, data, options);\n\n    }\n\n\n\n    useEffect(() => {\n        document.getElementById('chart-area').innerHTML = \"\";\n        renderChart()\n        return info;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [info, props.level,props.ivs,props.evs])\n\n    return (\n        <>\n            <li id=\"chart-area\"></li>\n        </>\n    )\n}\n\nexport default StatChart;","import React from 'react';\nimport { useHistory } from 'react-router-dom'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {getMoveInfo, startLoading, stopLoading} from '../../actions';\n\nconst MoveSetList = () => {\n    const history = useHistory();\n    const info = useSelector((state => state.info));\n    const dispatch = useDispatch();\n\n    // Renders the move set\n    const renderMoveSet = () => {\n        const moveSet = info.moves;\n        let learnMethod = '';\n        return moveSet.map((move,index) => {\n            learnMethod = getMethod(move);\n            const moveName = move.move.name;\n            return (\n                <li key={index} className=\"move\" onClick={() => updateMoveState(moveName)} ><p className='move-link'>{moveName.replace(\"-\",\" \").toUpperCase()}</p>\n                <p className=\"learn-method\">{learnMethod}</p>\n                </li>\n            )\n        })\n    }\n\n    // Updates move info state\n    const updateMoveState = async (moveName) => {\n        dispatch(startLoading())\n        await dispatch(getMoveInfo(moveName))\n        await history.push(\"/moves\")\n        dispatch(stopLoading())\n    }\n\n    // gets the method used to learn move\n    const getMethod = (move) => {\n        const version = move.version_group_details;\n        const method = version[version.length - 1].move_learn_method.name;\n             if(method === 'level-up') {\n                 const level = version[version.length - 1].level_learned_at;\n                 return `Learned at level ${level}`\n             }\n             else if(method === 'egg') {\n                 return 'Egg'\n             }\n             else {\n                 return \"TM\"\n             }\n     }\n\n    return (\n        <div className=\"row5\">\n            <p>Moveset</p>\n            <div className=\"move-set\">\n                {renderMoveSet()}\n            </div>\n        </div> \n    )    \n}\n\nexport default MoveSetList;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getEvolutionChain, getInfo, getSpeciesInfo } from '../../actions';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight, faArrowDown } from '@fortawesome/free-solid-svg-icons'\n\nconst EvolutionChain = () => {\n    const speciesInfo = useSelector(state => state.speciesInfo);\n    const evolutionChain = useSelector(state => state.evolutionChain);\n    const dispatch = useDispatch();\n\n    // updates the pokemon info state when clicked\n    const updatePokemonState = (e, pokemonName) => {\n        dispatch(getInfo(pokemonName))\n        dispatch(getSpeciesInfo(pokemonName))\n    }\n\n    // Formats the name for images\n    const imageNameFormatter = (name) => {\n        if (name === 'giratina') return 'giratina-altered';\n        if (name === 'urshifu') return 'urshifu-single-strike';\n        return name;\n    }\n\n    // Renders the evolution method for a pokemon\n    const renderEvolutionMethod = (stage) => {\n        for (const method in stage) {\n            if (stage[method]) {\n                if (method === 'min_level') {\n                    const text = 'Level ' + stage[method]\n                    return (\n                        <p className=\"evolution_method\">{text.toUpperCase()}</p>\n                    )\n                }\n                if (method === 'min_happiness') {\n                    const text = 'Happiness ' + stage[method]\n                    return (\n                        <p className=\"evolution_method\">{text.toUpperCase()}</p>\n                    )\n                }\n                if (method === 'item' || method === 'held-item') {\n                    let text = stage[method].name;\n                    if (text === 'held-item') text = 'Holding ' + stage[method]\n                    return (\n                        <p className=\"evolution_method\">{text.toUpperCase()}</p>\n                    )\n                }\n                if (method === 'known_move') {\n                    let text = 'Learned ' + stage[method].name;\n                    return (\n                        <p className=\"evolution-method\">{text.toUpperCase()}</p>\n                    )\n                }\n                if (method === 'trigger') {\n                    let text = stage[method].name;\n                    return (\n                        <p className=\"evolution-method\">{text.toUpperCase()}</p>\n                    )\n                }\n\n            }\n        }\n    }\n\n\n    // Renders the first stage of an evolution chain\n    const renderFirstStage = (stage) => {\n        if (stage) {\n            let { name } = stage.species;\n            name = imageNameFormatter(name)\n            return (\n                <div className=\"chain\">\n                    <li className=\"stage-image\" onClick={(e) => updatePokemonState(e, stage.species.name)}>\n                        <img src={`https://img.pokemondb.net/artwork/${name}.jpg`} alt={stage.species.name} />\n                        <p>{stage.species.name.toUpperCase()}</p>\n                    </li>\n                    <div className=\"arrow\">{stage.evolves_to.length > 0 && window.innerWidth > 500 && <FontAwesomeIcon icon={faArrowRight} className=\"arrow-right\" />}</div>\n                    <div className=\"arrow\">{stage.evolves_to.length > 0 && window.innerWidth <= 500 && <FontAwesomeIcon icon={faArrowDown} className=\"arrow-down\" />}</div>\n                </div>\n            );\n        }\n    }\n\n    // Rendes the rest of the chain\n    const renderChain = (data) => {\n        if (data) {\n            return data.evolves_to.map((stage, index) => {\n                const { evolution_details } = stage;\n                let { name } = stage.species;\n                name = imageNameFormatter(name);\n                if(name === 'lycanroc') name += '-midday'\n                return (\n                    <div key={index} className=\"chain\">\n                        <li className=\"stage-image\" key={index} onClick={(e) => updatePokemonState(e, stage.species.name)}>\n                            <img src={`https://img.pokemondb.net/artwork/${name}.jpg`} alt={stage.species.name} />\n                            <p>{stage.species.name.toUpperCase()}</p>\n                            {renderEvolutionMethod(evolution_details[evolution_details.length - 1])}\n                        </li>\n                        <div className=\"arrow\" key={index + 10}>{stage.evolves_to.length > 0 && window.innerWidth > 500 && <FontAwesomeIcon icon={faArrowRight} className=\"arrow-right\" />}</div>\n                        <div className=\"arrow\" key={index + 10 * 10}>{stage.evolves_to.length > 0 && window.innerWidth <= 500 && <FontAwesomeIcon icon={faArrowDown} className=\"arrow-down\" />}</div>\n                        {stage.evolves_to.length > 0 && renderChain(stage)}\n                    </div>\n                );\n            })\n        }\n    }\n\n    useEffect(() => {\n        dispatch(getEvolutionChain(speciesInfo.evolution_chain.url))\n        return speciesInfo;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [speciesInfo])\n\n    return (\n        <>\n            <p className=\"evolution-chain-header\">Evolution Chain</p>\n            <ul className=\"evolution-line\">\n                {renderFirstStage(evolutionChain)}\n                {renderChain(evolutionChain)}\n            </ul>\n        </>\n    )\n}\n\nexport default EvolutionChain;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getInfo, getSpeciesInfo } from '../../actions'\n\nconst AlternativeForms = () => {\n    const speciesInfo = useSelector(state => state.speciesInfo);\n    const dispatch = useDispatch();\n\n    // Formats the name into readable format\n    const nameFormatter = (pokemon) => {\n        pokemon = pokemon.split('-');\n        const temp = pokemon[0];\n        pokemon[0] = pokemon[1]\n        pokemon[1] = temp;\n        pokemon = pokemon.join(' ');\n        return pokemon;\n    }\n\n    // Formats the name for images\n    const imageNameFormatter = (pokemon) => {\n        if (pokemon.includes('gmax')) {\n            pokemon = pokemon.replace('gmax', ' gigantamax').split(' ')\n        }\n        else if (pokemon.includes('alola')) {\n            pokemon = pokemon.replace('alola', ' alolan').split(' ')\n        }\n        else if (pokemon.includes('galar')) {\n            pokemon = pokemon.replace('galar', ' galarian').split(' ')\n        }\n        else {\n            pokemon = pokemon.split('')\n        }\n        pokemon = pokemon.join('')\n        return pokemon;\n    }\n\n    // updates the pokemon info state when clicked\n    const updatePokemonState = (e, pokemonName) => {\n        dispatch(getInfo(pokemonName))\n        dispatch(getSpeciesInfo(pokemonName))\n    }\n\n    // Renders all the forms\n    const renderForms = () => {\n        const { varieties } = speciesInfo;\n        return varieties.map((form,index) => {\n            let { name } = form.pokemon\n            let captionName = name;\n            if (name.includes('-totem') ||\n                name.includes('-cap') ||\n                name.includes('-cosplay') ||\n                name.includes('-phd') ||\n                name.includes('-pop-star') ||\n                name.includes('-belle') ||\n                name.includes('rock-star') ||\n                name.includes('-libre')) return <></>;\n            if (name.includes('-')) {\n                name = imageNameFormatter(name)\n                captionName = nameFormatter(name)\n            }\n            if (name.includes('necrozma-dusk')) {\n                name += '-mane'\n            }\n            else if (name.includes('-dawn')) {\n                name += '-wings'\n            }\n            else if (name.includes('-own-tempo')) {\n                name = 'rockruff'\n            }\n            return (\n                <li key={captionName+index} className=\"form\" onClick={(e) => updatePokemonState(e, form.pokemon.name)} >\n                    {<img src={`https://img.pokemondb.net/artwork/${name}.jpg`} alt={name} />}\n                    <p>{captionName.toUpperCase()}</p>\n                </li>\n            )\n\n        })\n    }\n\n    return (\n        <div className=\"row4\">\n            <p className=\"form-list-header\">Alternate Forms</p>\n            <ul className=\"form-line\">\n                {speciesInfo && renderForms()}\n            </ul>\n        </div>\n    )\n}\n\nexport default AlternativeForms;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { renderLoading } from '../Loading';\nimport { getAbilityInfo, startLoading, stopLoading } from '../../actions';\nimport { useHistory } from 'react-router';\nimport { typeTable } from '../tables/TypeTable'\nimport StatChart from './StatChart';\nimport MoveSetList from './MoveSetList';\nimport EvolutionChain from './EvolutionChain';\nimport AlternativeForms from './AlternativeForms';\n\n\n\n// General Pokemon Information\nconst PokemonInfo = () => {\n\n    const info = useSelector((state => state.info));\n    const loading = useSelector((state => state.loading));\n    const speciesInfo = useSelector(state => state.speciesInfo);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // Renders the pokemon sprites\n    const renderSprites = () => {\n        let frontShiny = null\n        let frontSprite = info['sprites']['versions']['generation-vii']['ultra-sun-ultra-moon']['front_default']\n        if (frontSprite) {\n            frontShiny = info['sprites']['versions']['generation-vii']['ultra-sun-ultra-moon']['front_shiny']\n        }\n        else {\n            frontSprite = info['sprites']['versions']['generation-viii']['icons']['front_default']\n        }\n        return (\n            <div className=\"sprites\">\n                <img src={`${frontSprite}`} alt=\"sprite\" />\n                {frontShiny &&\n                    <img src={`${frontShiny}`} alt=\"sprite\" />\n                }\n            </div>\n        )\n    }\n\n    // Puts the name to readable format\n    const nameFormatter = (pokemon) => {\n        pokemon = pokemon.split('-')\n        const temp = pokemon[1];\n        pokemon[1] = pokemon[0];\n        pokemon[0] = temp;\n        pokemon = pokemon.join(' ')\n        return pokemon;\n    }\n\n    // Updates ability info state\n    const updateAbilityState = async (abilityName) => {\n        dispatch(startLoading())\n        await dispatch(getAbilityInfo(abilityName))\n        await dispatch(stopLoading())\n        history.push(\"/abilities\")\n    }\n\n    // Renders the pokemon id number\n    const renderPokemonId = () => {\n        const {id} = info;\n        if(id > 893) return <p className='pokemon-id'>SPECIAL</p>\n        return (\n            <p className=\"pokemon-id\">#{id}</p>\n        )\n    }\n\n    // Render the pokemon types\n    const renderTypes = () => {\n        const types = info.types;\n        return types.map((type, index) => {\n            return (\n                <li key={index}><img src={typeTable[type.type.name].icon} alt={type.type.name} className=\"type\" /></li>\n            )\n        })\n    }\n\n    // Render the pokemon abilities\n    const renderAbilities = () => {\n        const abilities = info.abilities;\n        return abilities.map((ability, index) => {\n            const abilityName = ability.ability.name.split(\"-\")\n                .map((word) => word.charAt(0).toUpperCase() + word.substr(1))\n                .join(' ');\n            return (\n                <li key={index * 5} className='ability' onClick={() => updateAbilityState(ability.ability.name)}>{abilityName}</li>\n            )\n        });\n    }\n\n    // Render the pokemon flavor text\n    const renderFlavorText = () => {\n        const text = speciesInfo.flavor_text_entries;\n        let chosenText = '';\n        text.forEach((flavor) => {\n            if (flavor.language.name === 'en') chosenText = flavor.flavor_text\n        });\n        let backgroundColor = typeTable[info['types'][0]['type']['name']]['color'];\n        if (backgroundColor === '#B7B1A3' && info.types.length > 1) backgroundColor = typeTable[info['types'][1]['type']['name']]['color']\n        return (\n            <>\n                <p className=\"text\" style={{ backgroundColor: backgroundColor }} >{chosenText}</p>\n            </>\n        )\n    }\n\n    // Renders all the info\n    const renderAllInfo = () => {\n        let { name } = info;\n        if (name.includes('-')) name = nameFormatter(name)\n        return (\n            <>\n                <div className=\"banner\">\n                    <div className=\"left-rect\"></div>\n                    <h1 className=\"name\">{name.toUpperCase()}</h1>\n                    <div className=\"right-rect\"></div>\n                </div>\n\n                <div className=\"row2\">\n                    {renderPokemonId()}\n                    {renderSprites()}\n                    <ul className=\"types\">\n                        <p className=\"type-header\">Types</p>\n                        {renderTypes()}\n                    </ul>\n                </div>\n                <div className=\"row3\">\n                    <div className=\"base-stats\">\n                        <div className=\"stats\">\n                            <p className='stat-header'>Base Stats</p>\n                            <ul className=\"stat-list\">\n                                <StatChart height={300} width={400} />\n                            </ul>\n                        </div>\n                    </div>\n                    <ul className=\"abilties\">\n                        <p className=\"ability-header\">Abilties</p>\n                        <div className=\"ability-list\">\n                            {renderAbilities()}\n                        </div>\n                        <div className=\"description\">\n                            <p>Description</p>\n                            {speciesInfo && renderFlavorText()}\n                        </div>\n                    </ul>\n                </div>\n                <EvolutionChain />\n                <AlternativeForms />\n                <MoveSetList />\n            </>\n        )\n    }\n\n    return (\n        <div className=\"pokemon-info\">\n            { loading ? renderLoading() : renderAllInfo()}\n        </div>\n    )\n}\n\nexport default PokemonInfo;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getInfo, getPokemon, getSpeciesInfo, searchPokemon, startLoading, stopLoading } from '../actions';\nimport PokemonInfo from '../components/pokemon/PokemonInfo';\n\n\nconst PokemonIndex = () => {\n    const pokemon = useSelector(state => state.pokemon)\n    const info = useSelector(state => state.info)\n    const dispatch = useDispatch()\n\n    // Highlights selection and changes info to selected pokemon's\n    const select = (e) => {\n        highlight(e)\n        updateInfo(e.target.id)\n    }\n\n    // Changes the Pokemon depending on what is typed\n    const search = (e) => {\n        dispatch(searchPokemon(e.target.value.replace(\" \", \"-\").toLowerCase()))\n        if (e.keyCode === 13) updateInfo(document.querySelector(\".list button\").id)\n    }\n\n\n    // Highlights selected element\n    const highlight = (e) => {\n        const highlighted = e.target.classList.contains(\"selected\")\n        if (highlighted) return;\n        const buttons = document.querySelectorAll(\".list button\");\n        buttons.forEach((button) => {\n            button.classList.remove('selected')\n        });\n        e.target.classList.toggle('selected');\n    }\n\n    // Formats name to readable format\n    const nameFormatter = (name) => {\n        if (!(name.includes('-f') || name.includes('m'))) return name.replace(/-.*/, '');\n        if (name.includes('meowstic')) return 'meowstic';\n        return name\n    }\n    // Formats name for images\n    const listNameFormatter = (pokemon) => {\n        pokemon = pokemon.split('-')\n        const temp = pokemon[1];\n        pokemon[1] = pokemon[0];\n        pokemon[0] = temp;\n        pokemon = pokemon.join(' ')\n        return pokemon;\n    }\n\n    // Changes info\n    const updateInfo = async (name) => {\n        dispatch(startLoading())\n        await dispatch(getSpeciesInfo(nameFormatter(name)))\n        dispatch(getInfo(name))\n        dispatch(stopLoading())\n    }\n\n    // Renders the pokemon list\n    const renderPokemon = () => {\n        return pokemon.map((pokemon) => {\n            let { name } = pokemon;\n            if (name.includes('-')) name = listNameFormatter(name)\n            return (\n                <button id={pokemon.name} onClick={select} key={name}>\n                    {name.toUpperCase()}\n                </button>\n            )\n        })\n    }\n\n    // Gets all the pokemon\n    useEffect(() => {\n        dispatch(getPokemon())\n        return pokemon\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div className=\"pokemon-index\">\n            <div className=\"input-field\">\n                <input onKeyUp={search} id=\"icon_prefix\" type=\"text\" className=\"validate\" />\n                <label htmlFor=\"icon_prefix\">Search</label>\n            </div>\n            <div className=\"list\">\n                {renderPokemon()}\n            </div>\n            {info &&\n                <PokemonInfo />\n            }\n        </div>\n\n    )\n}\n\nexport default PokemonIndex;","export default __webpack_public_path__ + \"static/media/shadow.5a04a035.png\";","export default __webpack_public_path__ + \"static/media/physical.fece5034.png\";","export default __webpack_public_path__ + \"static/media/special.3cb8ddba.png\";","export default __webpack_public_path__ + \"static/media/status.2f40396e.png\";","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { renderLoading } from '../Loading';\nimport bug from '../../images/types/bug.png';\nimport dark from '../../images/types/dark.png';\nimport dragon from '../../images/types/dragon.png';\nimport electric from '../../images/types/electric.png';\nimport fairy from '../../images/types/fairy.png';\nimport fighting from '../../images/types/fighting.png';\nimport fire from '../../images/types/fire.png';\nimport flying from '../../images/types/flying.png';\nimport ghost from '../../images/types/ghost.png';\nimport grass from '../../images/types/grass.png';\nimport ground from '../../images/types/ground.png';\nimport ice from '../../images/types/ice.png';\nimport normal from '../../images/types/normal.png';\nimport poison from '../../images/types/poison.png';\nimport psychic from '../../images/types/psychic.png';\nimport rock from '../../images/types/rock.png';\nimport steel from '../../images/types/steel.png';\nimport water from '../../images/types/water.png';\nimport shadow from '../../images/types/shadow.png';\nimport physical from '../../images/damage_classes/physical.png';\nimport special from '../../images/damage_classes/special.png';\nimport status from '../../images/damage_classes/status.png';\n\nconst MoveInfo = () => {\n    const moveInfo = useSelector((state => state.moveInfo))\n    const loading = useSelector((state => state.loading))\n\n    // Hash table for converting pokemon type strings to image\n    const typeTable = {\n        bug: bug,\n        dark: dark,\n        dragon: dragon,\n        electric: electric,\n        fairy: fairy,\n        fighting: fighting,\n        fire: fire,\n        flying: flying,\n        ghost: ghost,\n        grass: grass,\n        ground: ground,\n        ice: ice,\n        normal: normal,\n        poison: poison,\n        psychic: psychic,\n        rock: rock,\n        steel: steel,\n        water: water,\n        shadow: shadow\n    }\n\n    const damageClassTable = {\n        physical: physical,\n        special: special,\n        status: status\n    }\n\n    // Renders the type of move\n    const renderType = () => {\n        const type = moveInfo.type;\n        return (\n            <img src={typeTable[type.name]} alt={type.name} className=\"type\" />\n        )\n    }\n\n    // Render the damage class of the move\n    const renderDamageClass = () => {\n        const { damageClass } = moveInfo\n        if (damageClass) {\n            return (\n                <img src={damageClassTable[damageClass.name]} alt={damageClass.name} className=\"damage-class\" />\n            )\n        }\n    }\n\n    // Renders the PP of the move\n    const renderPP = () => {\n        const pp = moveInfo.pp;\n        if (pp === 1) return <p className=\"pp\">Z-Move</p>\n        return (\n            <p className=\"pp\">PP:{pp}</p>\n        )\n    }\n\n    // Renders the power of the move\n    const renderMovePower = () => {\n        const power = moveInfo.power ? moveInfo.power : '---';\n        return (\n            <p className=\"move-power\">Power:{power}</p>\n        )\n    }\n\n    // Renders the accuracy of the move\n    const renderMoveAccuracy = () => {\n        const accuracy = moveInfo.accuracy ? moveInfo.accuracy + '%' : '---';\n        return (\n            <p className=\"move-accuracy\">Accuracy:{accuracy}</p>\n        )\n    }\n\n    // Renders the move priority\n    const renderPriority = () => {\n        const priority = moveInfo.priority;\n        return (\n            <p className=\"effect-chance\">Priority:{priority}</p>\n        )\n    }\n\n    // Renders the most up-to-date flavor text\n    const renderMoveText = () => {\n        const text = moveInfo.flavor_text_entries;\n        let chosenText = '';\n        text.forEach((flavor) => {\n            if (flavor.language.name === 'en') chosenText = flavor.flavor_text\n        });\n        return (\n            <>\n                <p className=\"move-text\">{chosenText}</p>\n            </>\n        )\n    }\n\n    // Renders the most up-to-date details\n    const renderMoveDetails = () => {\n        const details = moveInfo.effect_entries;\n        let chosenText = '';\n        details.forEach((entry) => {\n            if (entry.language.name === 'en') chosenText = entry.effect;\n        });\n        chosenText = chosenText.replace(\"$effect_chance%\", moveInfo.effect_chance + '%')\n        return (\n            <>\n                <p className=\"move-text\">{chosenText}</p>\n            </>\n        )\n    }\n\n    // Renders all the info\n    const renderAllInfo = () => {\n        return (\n            <>\n                <div className=\"banner\">\n                    <div className=\"left-rect\"></div>\n                    <h1 className=\"name\">{moveInfo.name.toUpperCase().replace('-', ' ')}</h1>\n                    <div className=\"right-rect\"></div>\n                </div>\n                <div className=\"col2\">\n                    {renderType()}\n                    {renderDamageClass()}\n                    {renderPP()}\n                </div>\n                <div className=\"col3\">\n                    {renderMovePower()}\n                    {renderMoveAccuracy()}\n                    {renderPriority()}\n                </div>\n                <div className=\"col4\">\n                    {renderMoveText()}\n                </div>\n                <div className=\"col5\">\n                    Effect\n            </div>\n                <div className=\"col6\">\n                    {renderMoveDetails()}\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <div className=\"move-info\">\n            {loading ? renderLoading() : renderAllInfo()}\n        </div>\n    )\n}\n\nexport default MoveInfo;","import React, {useEffect} from 'react';\nimport { useSelector,useDispatch } from 'react-redux';\nimport { getMoves, getMoveInfo, searchMoves, startLoading, stopLoading } from '../actions';\nimport MoveInfo from '../components/moves/MoveInfo';\n\nconst MoveIndex = () => {\n    const dispatch = useDispatch()\n    const moves = useSelector(state => state.moves)\n    const moveInfo = useSelector(state => state.moveInfo)\n\n    // Highlights selection and changes info to selected move's\n    const select = (e) => {\n        highight(e)\n        updateInfo(e.target.id)\n    }\n\n    // Highlights selection\n    const highight = (e) => {\n        const highlighted = e.target.classList.contains(\"selected\")\n        if(highlighted) return;\n        const buttons = document.querySelectorAll(\".list button\");\n        buttons.forEach((button) => {\n            button.classList.remove('selected')\n        });\n        e.target.classList.toggle('selected');\n     }\n\n     // Changes info\n    const updateInfo = async(move) => {\n        dispatch(startLoading())\n        await dispatch(getMoveInfo(move))\n        dispatch(stopLoading())\n    }\n\n    // Changes the Pokemon depending on what is typed\n    const search = (e) => {\n        dispatch(searchMoves(e.target.value.replace(\" \", \"-\").toLowerCase()))\n        if (e.keyCode === 13) updateInfo(document.querySelector(\".list button\").id)\n    }\n\n    // Render moves to display\n    const renderMoves = () => {\n        return moves.map((move) => {\n            const moveName = move.name.split('-')\n            .map((word) => word.charAt(0).toUpperCase() + word.substr(1))\n            .join(' ');\n            return (\n                <button id={move.name} onClick={select} key={move.name}>\n                        {moveName.toUpperCase()}\n                    </button>\n            )\n        })\n    }\n\n    // Gets all the moves\n    useEffect(() => {\n        dispatch(getMoves())\n        return moves;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[])\n\n    return (\n        <div className=\"move-index\">\n            <div className=\"input-field\">\n            <input onKeyUp={search} id=\"icon_prefix\" type=\"text\" className=\"validate\"/>\n            <label htmlFor=\"icon_prefix\">Search</label>\n            </div>\n            <div className=\"list\">\n                {renderMoves()}\n            </div>\n            {moveInfo && \n            <MoveInfo/>\n            }     \n        </div>\n        \n    )\n}\n\nexport default MoveIndex;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport {getEvolutionChain, getInfo, getSpeciesInfo, startLoading, stopLoading} from '../../actions';\n\nconst PokemonList = () => {\n    const abilityInfo = useSelector(state => state.abilityInfo)\n    const speciesInfo = useSelector(state => state.speciesInfo)\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // Render Image\n    const renderImage = (pokemon) => {\n        const pokemonName = pokemon.replace('gmax','gigantamax')\n        .replace('galar','galarian')\n        .replace('alola','alolan')\n        return (\n            <img src={`https://img.pokemondb.net/artwork/${pokemonName}.jpg`} alt={pokemonName}/>\n        )\n    }\n\n    // Formats the name into readable format\n    const nameFormatter = (pokemon) => {\n            if(pokemon.includes('gmax')) {\n                pokemon = pokemon.replace('-gmax',' gigantamax').split(' ')\n            }\n            else if(pokemon.includes('alola')) {\n                pokemon = pokemon.replace('-alola',' alolan').split(' ')\n            }\n            else if(pokemon.includes('galar')) {\n                pokemon = pokemon.replace('-galar',' galarian').split(' ')\n            }\n            else {\n                pokemon = pokemon.split('-')   \n            }\n            const temp = pokemon[1];\n            pokemon[1] = pokemon[0];\n            pokemon[0] = temp;\n            pokemon = pokemon.join(' ')\n            return pokemon;\n    }\n    \n\n    // Renders the pokemon info cards\n    const renderCards = () => {\n        const pokemon = abilityInfo.pokemon;\n        return pokemon.map((entry) => {\n            const pokemonName = entry.pokemon.name;\n            const formattedName = pokemonName.includes('-') ? nameFormatter(entry.pokemon.name) : entry.pokemon.name;\n            if(pokemonName.includes('-totem')\n            || pokemonName.includes('-cosplay')\n            || pokemonName.includes('-cap')\n            || pokemonName.includes('-libre')\n            || pokemonName.includes('-phd')\n            || pokemonName.includes('-pop-star')\n            || pokemonName.includes('-belle')\n            || pokemonName.includes('-rock-star')) return <></>;\n            return (\n                <div key={pokemonName} className=\"pokemon-ability-card\" onClick={() => updatePokemonState(pokemonName)}>\n                    {renderImage(pokemonName)}\n                    <p className=\"name\">{formattedName.toUpperCase()}</p> \n                    <p className=\"is-hidden\">Hidden Ability:{entry.is_hidden.toString().toUpperCase()}</p>\n                </div>\n            )\n        })\n    }\n\n    // Updates the pokemon info state when clicked\n    const updatePokemonState = async (pokemonName) => {\n        dispatch(startLoading())\n        dispatch(getInfo(pokemonName))\n        // if(pokemonName.includes('-')) pokemonName = nameFormatter(pokemonName)\n        pokemonName = pokemonName.replace(/-.*/,\"\")\n        await dispatch(getSpeciesInfo(pokemonName)).then(dispatch(getEvolutionChain(speciesInfo.evolution_chain.url)))\n        await history.push(\"/pokemon\")\n        dispatch(stopLoading())\n    }\n\n    return (\n        <>\n        {renderCards()}\n        </>\n    )\n\n}\n\nexport default PokemonList;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { renderLoading } from '../Loading';\n\nimport PokemonList from './PokemonList';\n\nconst AbilityInfo = () => {\n    const abilityInfo = useSelector(state => state.abilityInfo);\n    const loading = useSelector((state => state.loading));\n\n    // Renders the most up-to-date flavor text\n    const renderFlavorText = () => {\n        const { flavor_text_entries } = abilityInfo;\n        let chosenText = '';\n        flavor_text_entries.forEach((flavor) => {\n            if (flavor.language.name === 'en') chosenText = flavor.flavor_text\n        });\n        return (\n            <>\n                <p className=\"ability-text\">{chosenText}</p>\n            </>\n        )\n    }\n\n    // Renders the most up-to-date effect text\n    const renderEffectText = () => {\n        const { effect_entries } = abilityInfo;\n        let chosenText = '';\n        effect_entries.forEach((entry) => {\n            if (entry.language.name === 'en') chosenText = entry.effect;\n        });\n        return (\n            <>\n                <p className=\"ability-text\">{chosenText}</p>\n            </>\n        )\n    }\n\n    // Renders all the information\n    const renderAllInfo = () => {\n        return (\n            <>\n            <div className=\"banner\">\n                <div className=\"left-rect\"></div>\n                <h1 className=\"name\">{abilityInfo.name.toUpperCase()}</h1>\n                <div className=\"right-rect\"></div>\n            </div>\n                \n                <div className=\"col2\">\n                    {renderFlavorText()}\n                </div>\n                <div className=\"col3\">\n                    Effect\n            </div>\n                <div className=\"col4\">\n                    {renderEffectText()}\n                </div>\n                <div className=\"col5\">\n                    Pokemon that have this ability\n            </div>\n                <div className=\"col6\">\n                    <PokemonList />\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <div className=\"ability-info\">\n            { loading ? renderLoading() : renderAllInfo()}\n        </div>\n    )\n}\n\nexport default AbilityInfo;","import React, {useEffect} from 'react';\nimport { useSelector,useDispatch } from 'react-redux';\nimport { getAbilities, searchAbilities, getAbilityInfo, startLoading, stopLoading } from '../actions';\n\nimport AbilityInfo from '../components/abilities/AbilityInfo';\n\nconst AbilityIndex = () => {\n    const abilities = useSelector(state => state.abilities)\n    const abilityInfo = useSelector(state => state.abilityInfo)\n    const dispatch = useDispatch()\n    \n    // Highlights and changes state\n    const select = (e) => {\n        highlight(e)\n        updateInfo(e.target.id)\n    }\n\n    // Updats the ability info\n    const updateInfo = async(ability) => {\n        dispatch(startLoading())\n        await dispatch(getAbilityInfo(ability))\n        dispatch(stopLoading())\n    }\n\n    // Highlight selected button\n    const highlight = (e) => {\n        const highlighted = e.target.classList.contains(\"selected\")\n        if(highlighted) return;\n        const buttons = document.querySelectorAll(\".list button\");\n        buttons.forEach((button) => {\n            button.classList.remove('selected')\n        });\n        e.target.classList.toggle('selected');\n    }\n\n    // Searches through the ability list\n    const search = (e) => {         \n        dispatch(searchAbilities(e.target.value.replace(\" \", \"-\").toLowerCase()))\n        if (e.keyCode === 13) updateInfo(document.querySelector(\".list button\").id)\n    }\n\n\n    // Render all the abilities in a list\n    const renderAbilites = () => {\n        return abilities.map((ability,index) => {\n            const abilityName = ability.name.split('-')\n            .map((word) => word.charAt(0).toUpperCase() + word.substr(1))\n            .join(' ');\n            return (\n                <button id={ability.name} key={ability.name+index} onClick={select}>\n                    {abilityName.toUpperCase()}\n                </button>\n            )\n        })\n    }\n    \n\n    // Gets all the abilties\n    useEffect(() => {\n        dispatch(getAbilities())\n        return abilities\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[])\n\n    return (\n        <div className=\"ability-index\">\n            <div className=\"input-field\">\n            <input onKeyUp={search} id=\"icon_prefix\" type=\"text\" className=\"validate\"/>\n            <label htmlFor=\"icon_prefix\">Search</label>\n            </div>\n            <div className=\"list\">\n                {renderAbilites()}\n            </div>\n            {abilityInfo && \n            <AbilityInfo/>\n            }     \n        </div>\n        \n    )\n}\n\nexport default AbilityIndex;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nconst ItemInfo = () => {\n    const itemInfo = useSelector(state => state.itemInfo)\n    const loading = useSelector((state => state.loading))\n\n    let { name } = itemInfo;\n    name = name.replace('-', ' ').toUpperCase();\n\n    // Renders item sprites\n    const renderSprite = () => {\n        const { sprites, name } = itemInfo;\n        return (\n            <img src={sprites.default} alt={name} className=\"item-sprite\" />\n        )\n    }\n\n    // Renders item fling power\nconst renderFlingPower = () => {\n        let { fling_power } = itemInfo;\n        return (\n            <p className=\"fling-power\">Fling Power:{fling_power ? fling_power : 0}</p>\n        )\n    }\n\n    // Renders item category\n    const renderCategory = () => {\n        let { name } = itemInfo.category;\n        if (name.includes('-')) name = name.replace('-', ' ')\n        return (\n            <p className=\"item-category\">{name.toUpperCase()}</p>\n        )\n    }\n\n    // Renders the most up-to-date flavor text\n    const renderFlavorText = () => {\n        const { flavor_text_entries } = itemInfo;\n        let chosenText = '';\n        flavor_text_entries.forEach((flavor) => {\n            if (flavor.language.name === 'en') chosenText = flavor.text\n        });\n        return (\n            <>\n                <p className=\"item-text\">{chosenText}</p>\n            </>\n        )\n    }\n\n    // Renders the most up-to-date effect text\n    const renderEffectText = () => {\n        const { effect_entries } = itemInfo;\n        let chosenText = '';\n        effect_entries.forEach((entry) => {\n            if (entry.language.name === 'en') chosenText = entry.effect;\n        });\n        return (\n            <>\n                <p className=\"item-text\">{chosenText}</p>\n            </>\n        )\n    }\n\n    // Renders loading spinner\n    const renderLoading = () => {\n        return (\n            <>\n                <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n            </>\n        )\n    }\n\n    // Renders all the information\n    const renderAllInfo = () => {\n        return (\n            <>\n                <div className=\"banner\">\n                    <div className=\"left-rect\"></div>\n                    <h1 className=\"name\">{name}</h1>\n                    <div className=\"right-rect\"></div>\n                </div>\n\n                <div className=\"col2\">\n                    {renderCategory()}\n                    {renderSprite()}\n                    {renderFlingPower()}\n                </div>\n                <div className=\"col3\">\n                    {renderFlavorText()}\n                </div>\n                <div className=\"col4\">\n                    Effect\n            </div>\n                <div className=\"col5\">\n                    {renderEffectText()}\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <div className=\"item-info\">\n            { loading ? renderLoading() : renderAllInfo()}\n        </div>\n\n    )\n\n}\n\nexport default ItemInfo;","import React, {useEffect} from 'react';\nimport { useSelector,useDispatch } from 'react-redux';\nimport { getItems, searchItems, getItemInfo, startLoading, stopLoading } from '../actions';\n\nimport ItemInfo from '../components/items/ItemInfo';\n\nconst ItemIndex = () => {\n    const items = useSelector(state => state.items);\n    const itemInfo = useSelector(state => state.itemInfo);\n    const dispatch = useDispatch(); \n\n    // Renders new info component\n    const select = (e) => {\n        highlight(e)\n        updateInfo(e.target.id)\n    }\n\n    // Highlights selection\n    const highlight = (e) => {\n        const highlighted = e.target.classList.contains(\"selected\")\n        if(highlighted) return;\n        const buttons = document.querySelectorAll(\".list button\");\n        buttons.forEach((button) => {\n            button.classList.remove('selected')\n        });\n        e.target.classList.toggle('selected');\n     }\n\n     const search = (e) => {\n         dispatch(searchItems(e.target.value.replace(\" \", \"-\").toLowerCase()))\n         if (e.keyCode === 13) updateInfo(document.querySelector(\".list button\").id)\n     }\n\n      // Changes info\n    const updateInfo = async(item) => {\n        dispatch(startLoading())\n        await dispatch(getItemInfo(item))\n        dispatch(stopLoading())\n    }\n\n    // Render all the items in a list\n    const renderItems = () => {\n        return items.map((item) => {\n            const itemName = item.name.replace('-',' ')\n            return (\n                <button id={item.name} key={item.name} onClick={select} >\n                    {itemName.toUpperCase()}\n                </button>\n            )\n        })\n    }\n\n    useEffect(() => {\n        dispatch(getItems())\n        return items\n        // eslint-disable-next-line\n    },[])\n\n    return (\n        <div className=\"move-index\">\n            <div className=\"input-field\">\n            <input onKeyUp={search} id=\"icon_prefix\" type=\"text\" className=\"validate\"/>\n            <label htmlFor=\"icon_prefix\">Search</label>\n            </div>\n            <div className=\"list\">\n                {renderItems()}\n            </div>\n            {itemInfo && \n            <ItemInfo/>\n            }     \n        </div>\n        \n    )\n\n}\n\nexport default ItemIndex;","import { gql } from \"apollo-boost\";\n\n\n// Create a new user\nexport const addUserMutation = gql`\nmutation($username:String!,$email:String!,$password:String!){\n    addUser(username:$username,email:$email,password:$password){\n        token\n    }\n}\n`\n// Queries for a user by username\nexport const tokenAuthMutation = gql`\nmutation($username:String!, $email:String!, $password:String!){\n    tokenAuth(username:$username, email:$email, password:$password){\n        token\n    }\n}\n`\n\n","import { gql } from \"apollo-boost\";\n\n// adds a new team\nexport const addTeamMutation = gql`\n    mutation($name:String!,$userId:ID!){\n        addTeam(name:$name,userId:$userId){\n            name\n        }\n    }\n`\n\n\n// get the teams with the user id\nexport const getTeamsQuery = gql`\n    query($userId:ID!){\n        allTeamsByUser(userId:$userId){\n            name\n            id\n            pokemon{\n                name\n                id\n            }\n        }\n    }\n`;\n\n// edit the team\nexport const editTeamMutation = gql`\n    mutation($id:ID!,$name:String!){\n        editTeam(id:$id,name:$name){\n            name\n        }\n    }\n`\n// edit the pokemon\nexport const editPokemonMutation = gql`\n    mutation($id:ID!,$name:String!,$level:Int!,$nature:String!, $item:String!, $ability:String!, $moveset:[String!]!, $ivs: [Int!]!, $evs: [Int!]! ){\n        editPokemon(id:$id,name:$name, level: $level, nature: $nature, item: $item, ability:$ability moveset: $moveset, ivs: $ivs, evs: $evs){\n            name\n        }\n    }\n`\n\n// get the pokemon\nexport const getPokemonQuery = gql`\n    query($id:ID!){\n        pokemon(id:$id){\n            name\n            level\n            nature\n            item\n            ability\n            moveset\n            ivs\n            evs\n            id\n        }\n    }\n`\n// delete team\nexport const deleteTeamMutation = gql`\n    mutation($id:ID!){\n        deleteTeam(id:$id){\n            name\n        }\n    }\n`\n\nexport const getAllPokemonByTeamQuery = gql`\n    query($teamId:ID!){\n        getAllPokemonByTeam(teamId:$teamId){\n            name\n            level\n            nature\n            item\n            ability\n            moveset\n            ivs\n            evs\n            id\n        }\n    }\n`","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport { useMutation } from 'react-apollo';\nimport { useDispatch } from 'react-redux';\nimport emailjs from 'emailjs-com';\nimport { addUserMutation } from '../queries/accountQueries';\nimport { addTeamMutation, getTeamsQuery } from '../queries/teamQueries';\nimport { logIn } from '../actions';\nimport { getCookie } from '../App';\n\nrequire('dotenv').config({ path: \"../../../.env\" })\n\n\nconst SignUp = () => {\n\n    const [addUser] = useMutation(\n        addUserMutation,\n        {\n            onCompleted({ addUser }) {\n                if (addUser.token === 'username already exists') setDuplicateUser(true)\n                else if (addUser.token === 'email already exists') setDuplicateEmail(true)\n                else if (addUser.token === 'email is invalid') setInvalidEmail(true)\n                else {\n                    storeToken(addUser);\n                    sendWelcomeEmail();\n                }\n            }\n        }\n    );\n\n    const [addTeam] = useMutation(addTeamMutation)\n    const [username, setUsername] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confirm, setConfirm] = useState(\"\");\n    const [blankUsername, setBlankUsername] = useState(false)\n    const [blankPassword, setBlankPassword] = useState(false)\n    const [blankEmail, setBlankEmail] = useState(false)\n    const [invalidEmail, setInvalidEmail] = useState(false)\n    const [duplicateUser, setDuplicateUser] = useState(false)\n    const [duplicateEmail, setDuplicateEmail] = useState(false)\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    // Stores the JWT in cookie\n    const storeToken = (response) => {\n        const date = new Date();\n        date.setTime(date.getTime() + (12 * 60 * 60 * 1000));\n        document.cookie = `jwtToken=${response.token}; Path=/; expires=${date.toUTCString()}`;\n        addTeam({\n            variables: {\n                name: \"Team 1\",\n                userId: getCookie()\n            },\n            refetchQueries: [\n                {\n                    query: getTeamsQuery,\n                    variables: {\n                        userId: getCookie()\n                    }\n                }\n            ]\n        })\n        dispatch(logIn())\n        history.push('/teams')\n    }\n\n    // Paramters for the email template\n    const templateParams = {\n        to_email: email,\n        to_name: username,\n    }\n\n    // Sends welcome email to signed up user\n    const sendWelcomeEmail = () => {\n        emailjs.send('service_5s1sx5t', 'template_f3gz52e', templateParams, 'user_cIbsYc1qZGDdodomicrDe')\n    }\n\n    // Submits form to the database\n    const submitForm = async (e) => {\n        e.preventDefault();\n        if (!username) setBlankUsername(true);\n        if (!password) setBlankPassword(true);\n        if (!email) setBlankEmail(true);\n        if (password === confirm && password && confirm && email && username) {\n            await addUser({\n                variables: {\n                    username: username,\n                    email: email,\n                    password: password,\n                }\n            })\n        }\n    }\n\n    // renders blank username error\n    const blankUsernameError = () => {\n        return <p className=\"error-message\">Username is required</p>\n    }\n\n    const duplicateUserError = () => {\n        return <p className=\"error-message\">Username is taken</p>\n    }\n\n    // renders blank password error\n    const blankPasswordError = () => {\n        return <p className=\"error-message\">Password is required</p>\n    }\n\n    // renders blank email error\n    const blankEmailError = () => {\n        return <p className=\"error-message\">Email is required</p>\n    }\n\n    const invalidEmailError = () => {\n        return <p className=\"error-message\">Email is invalid</p>\n    }\n\n    const duplicateEmailError = () => {\n        return <p className=\"error-message\">There is already an account using this email</p>\n    }\n\n    // renders if password and password confirmation doesn't match\n    const passwordVerificationError = () => {\n        if (password !== confirm && password !== \"\" && confirm !== \"\") {\n            return <p className=\"error-message\">Passwords do not match</p>\n        }\n    }\n\n    // renders if username is too short\n    const userNameLengthError = () => {\n        return <p className=\"error-message\">Username must be at least 3 characters long</p>\n    }\n\n    return (\n        <div className=\"signup\">\n            <h3>SIGN UP! CREATE YOUR BEST TEAMS!</h3>\n            <form className=\"signup-form\" onSubmit={submitForm} >\n                <label htmlFor=\"username\">Username</label>\n                <input className='signup-input' type=\"text\" name='username'\n                    onFocus={() => {\n                        setBlankUsername(false)\n                        setDuplicateUser(false)\n                    }}\n                    onChange={(e) => setUsername(e.target.value)} />\n                {username && username.length < 3 && userNameLengthError()}\n                {blankUsername && blankUsernameError()}\n                {duplicateUser && duplicateUserError()}\n                <label htmlFor=\"email\">Email</label>\n                <input className='signup-input' type=\"email\" name='email'\n                    onFocus={() => {\n                        setBlankEmail(false)\n                        setDuplicateEmail(false)\n                        setInvalidEmail(false)\n                    }}\n                    onChange={(e) => setEmail(e.target.value)} />\n                {blankEmail && blankEmailError()}\n                {duplicateEmail && duplicateEmailError()}\n                {invalidEmail && invalidEmailError()}\n                <label htmlFor=\"password\">Password</label>\n                <input className='signup-input' type=\"password\" name='password'\n                    onFocus={() => setBlankPassword(false)} onChange={(e) => setPassword(e.target.value)} />\n                {passwordVerificationError()}\n                {blankPassword && blankPasswordError()}\n                <label htmlFor=\"confirm\">Confirm Password</label>\n                <input className='signup-input' type=\"password\" name='confirm' onChange={(e) => setConfirm(e.target.value)} />\n                {passwordVerificationError()}\n                <button className=\"waves-effect waves-light btn-large signup-submit\">Signup</button>\n            </form>\n        </div>\n    )\n}\n\nexport default SignUp;","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from 'react-apollo';\nimport { useDispatch } from 'react-redux';\n\nimport { tokenAuthMutation } from '../queries/accountQueries'\nimport { logIn } from '../actions';\n\nconst Login = () => {\n\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [invalidcredentials, setInvalidCredientials] = useState(false)\n\n    const [tokenAuth] = useMutation(\n        tokenAuthMutation,\n        {\n            onCompleted({ tokenAuth }) {\n                if (tokenAuth) storeToken(tokenAuth)\n                else setInvalidCredientials(true)\n            }\n        }\n    )\n\n\n    // Renders error username or password is invalid\n    const badLoginError = () => {\n        return <p className=\"error-message\" style={{fontSize:'15px'}}>Invalid username or password</p>\n    }\n\n    // Stores JWT in cookie\n    const storeToken = (response) => {\n        const date = new Date();\n        date.setTime(date.getTime() + (12 * 60 * 60 * 1000));\n        document.cookie = `jwtToken=${response.token}; Path=/; expires=${date.toUTCString()}`;\n        dispatch(logIn())\n        history.push(\"/teams\")\n    }\n\n\n\n    // Submits the form to the database\n    const submitForm = (e) => {\n        e.preventDefault();\n        tokenAuth({\n            variables: {\n                username: username,\n                email: username,\n                password: password,\n            },\n        })\n    }\n\n    return (\n        <div className=\"login\">\n            <form className=\"login-form\" onSubmit={submitForm}>\n                <h3>Login</h3>\n                {invalidcredentials && badLoginError()}\n                <label htmlFor=\"username\">Username or Email</label>\n                <input type=\"text\" name=\"username\" className=\"login-input\" \n                onFocus={() => setInvalidCredientials(false)} onChange={(e) => setUsername(e.target.value)} />\n                <label htmlFor=\"password\">Password</label>\n                <input type=\"password\" className=\"login-input\" name=\"password\" \n                onFocus={() => setInvalidCredientials(false)} onChange={(e) => setPassword(e.target.value)} />\n                <button className=\"waves-effect waves-light btn-large login-submit\">LogIn</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Login","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMutation } from 'react-apollo';\nimport Select from 'react-select';\nimport { getPokemon, getItems, getInfo, getSpeciesInfo } from '../../actions';\nimport { editPokemonMutation, getTeamsQuery, getPokemonQuery } from '../../queries/teamQueries';\nimport StatChart from '../pokemon/StatChart';\nimport { pokemonOptions, itemOptions, moveOptions, natureOptions, abilityOptions } from '../../options/options';\nimport { getCookie } from '../../App';\n\n\n// General Pokemon Information\nconst TeamPokemonInfo = () => {\n    const token = getCookie();\n    const dispatch = useDispatch()\n    const teamPokemonInfo = useSelector(state => state.teamPokemonInfo);\n    const pokemonList = useSelector(state => state.pokemon);\n    const itemList = useSelector(state => state.items);\n    const info = useSelector(state => state.info);\n    const [pokemon, setPokemon] = useState('');\n    const [level, setLevel] = useState('1');\n    const [nature, setNature] = useState('hardy');\n    const [item, setItem] = useState('');\n    const [ability, setAbility] = useState('');\n    const [moveset, setMoveset] = useState([]);\n    const [ivs, setIVs] = useState([0, 0, 0, 0, 0, 0]);\n    const [evs, setEVs] = useState([0, 0, 0, 0, 0, 0]);\n    const [editPokemon] = useMutation(editPokemonMutation);\n    const [evCount, setEvCount] = useState(0);\n\n    useEffect(() => {\n        const { name, level, nature, item, ability, moveset, ivs, evs } = teamPokemonInfo;\n        dispatch(getPokemon())\n        if (name) {\n            dispatch(getInfo(name))\n            dispatch(getSpeciesInfo(name))\n        }\n        dispatch(getItems())\n        setPokemon(name)\n        setLevel(level)\n        setNature(nature)\n        setItem(item)\n        setAbility(ability)\n        setMoveset(moveset)\n        setIVs(ivs)\n        setEVs(evs)\n        return teamPokemonInfo\n        // eslint-disable-next-line\n    }, [teamPokemonInfo])\n\n    useEffect(() => {\n        if (pokemon) {\n            dispatch(getInfo(pokemon))\n            dispatch(getSpeciesInfo(pokemon))\n        }\n        return pokemon\n        // eslint-disable-next-line\n    }, [pokemon])\n\n    useEffect(() => {\n        const sum = sumEvs(evs);\n        setEvCount(sum)\n        return evs\n        // eslint-disable-next-line\n    }, [evs])\n\n    // submits the form information the database\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const { id } = teamPokemonInfo;\n        editPokemon({\n            variables: {\n                name: pokemon,\n                level: Number(level),\n                nature,\n                item,\n                moveset,\n                ability,\n                ivs,\n                evs,\n                id,\n            },\n            refetchQueries: [\n                {\n                    query: getTeamsQuery,\n                    variables: {\n                        userId: token,\n                    }\n                },\n                {\n                    query: getPokemonQuery,\n                    variables: {\n                        id\n                    }\n                }\n            ]\n        })\n    }\n\n    // clears all pokemon information their defaults\n    const handleDelete = (e) => {\n        e.preventDefault();\n        const { id } = teamPokemonInfo;\n        editPokemon({\n            variables: {\n                name: \"\",\n                level: 1,\n                nature: \"hardy\",\n                item: \"\",\n                moveset: [],\n                ability: \"\",\n                ivs: [0, 0, 0, 0, 0, 0],\n                evs: [0, 0, 0, 0, 0, 0],\n                id,\n            },\n            refetchQueries: [\n                {\n                    query: getTeamsQuery,\n                    variables: {\n                        userId: token,\n                    }\n                },\n                {\n                    query: getPokemonQuery,\n                    variables: {\n                        id\n                    }\n                }\n            ]\n        })\n    }\n\n    // adds a new move to the multi-select with a limit of 4\n    const handleMovesetChange = (option) => {\n        if (option.length > 4) option.pop();\n        setMoveset(option.map((option) => option.value))\n    }\n\n    // presets the moveset based on what it was previously\n    const presetMoveset = () => {\n        return moveset.map((move) => {\n            return { value: move, label: move.toUpperCase() }\n        })\n    }\n\n    // sets the ivs\n    const setIVState = (iv, stat) => {\n        const ivCopy = ivs.slice(0);\n        if (iv < 0) ivCopy[stat] = 0;\n        else if (iv > 31) ivCopy[stat] = 31;\n        else ivCopy[stat] = iv;\n        setIVs(ivCopy);\n    }\n\n    // sets the evs\n    const setEVState = (ev, stat) => {\n        const evCopy = evs.slice(0);\n        console.log(510 - evCount)\n        if (evCount - evCopy[stat] + ev > 510) evCopy[stat] = 510 - evCount;\n        else if (ev < 0) evCopy[stat] = 0;\n        else if (ev > 252) evCopy[stat] = 252;\n        else evCopy[stat] = ev;\n        setEVs(evCopy);\n    }\n\n    // sums up all the evs that have been allocated\n    const sumEvs = (evs) => {\n        if (evs) {\n            return evs.reduce((count, currentEv) => count + currentEv)\n        }\n    }\n\n    return (\n        <div className=\"team-pokemon-info\">\n            <label htmlFor=\"pokemon-select\" className=\"pokemon-select-label\">Pokemon</label>\n            <Select\n                options={pokemonOptions(pokemonList)}\n                value={{ value: pokemon || '', label: (pokemon && pokemon.toUpperCase()) || '' }}\n                onChange={(option) => setPokemon(option.value)}\n                className='pokemon-select'\n                isSearchable\n            />\n            <div className=\"level-container\">\n                <label htmlFor=\"level-input\" className=\"level-input-label\" >Level</label>\n                <input className=\"level-input\" name=\"level-input\" type=\"number\" min='1' max='100' value={level || \"\"}\n                    onChange={(e) => setLevel(e.target.value)}\n                    onBlur={() => (level < 1 && setLevel(\"1\")) || (level > 100 && setLevel(\"100\"))}\n                />\n            </div>\n            <p className=\"stat-header\">IVs</p>\n            <ul className=\"ivs\">\n                <li>\n                    <label htmlFor=\"hp-iv\">HP</label>\n                    <input type=\"number\" name='hp-iv' value={(ivs && ivs[0].toString()) || 0} className=\"mod-input\" min='0' max='31'\n                        onChange={(e) => setIVState(Number(e.target.value), 0)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor=\"atk-iv\">ATK</label>\n                    <input type=\"number\" name='atk-iv' value={(ivs && ivs[1].toString()) || 0} className=\"mod-input\" min='0' max='31'\n                        onChange={(e) => setIVState(Number(e.target.value), 1)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor=\"def-iv\">DEF</label>\n                    <input type=\"number\" name='def-iv' value={(ivs && ivs[2].toString()) || 0} className=\"mod-input\" min='0' max='31'\n                        onChange={(e) => setIVState(Number(e.target.value), 2)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor=\"sp-atk-iv\">SP.ATK</label>\n                    <input type=\"number\" name='sp-atk-iv' value={(ivs && ivs[3].toString()) || 0} className=\"mod-input\" min='0' max='31'\n                        onChange={(e) => setIVState(Number(e.target.value), 3)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor=\"sp-def-iv\">DEF.ATK</label>\n                    <input type=\"number\" name='sp-def-iv' value={(ivs && ivs[4].toString()) || 0} className=\"mod-input\" min='0' max='31'\n                        onChange={(e) => setIVState(Number(e.target.value), 4)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor=\"spd-iv\">SPD</label>\n                    <input type=\"number\" name='spd-iv' value={(ivs && ivs[5].toString()) || 0} className=\"mod-input\" min='0' max='31'\n                        onChange={(e) => setIVState(Number(e.target.value), 5)}\n                    />\n                </li>\n            </ul>\n            <p className=\"stat-header\">EVs</p>\n            <ul className=\"ivs\">\n                <li>\n                    <label htmlFor=\"hp-ev\">HP</label>\n                    <input type=\"number\" name='hp-ev' value={(evs && evs[0].toString()) || 0} className=\"mod-input\" min='0' max='252'\n                        onChange={(e) => setEVState(Number(e.target.value), 0)}\n                    />\n                </li>\n                <li>\n                    <label htmlFor=\"atk-ev\">ATK</label>\n                    <input type=\"number\" name='atk-ev' value={(evs && evs[1].toString()) || 0} className=\"mod-input\" min='0' max='252'\n                        onChange={(e) => setEVState(Number(e.target.value), 1)} />\n                </li>\n                <li>\n                    <label htmlFor=\"def-ev\">DEF</label>\n                    <input type=\"number\" name='def-ev' value={(evs && evs[2].toString()) || 0} className=\"mod-input\" min='0' max='252'\n                        onChange={(e) => setEVState(Number(e.target.value), 2)} />\n                </li>\n                <li>\n                    <label htmlFor=\"sp-atk-ev\">SP.ATK</label>\n                    <input type=\"number\" name='sp-atk-ev' value={(evs && evs[3].toString()) || 0} className=\"mod-input\" min='0' max='252'\n                        onChange={(e) => setEVState(Number(e.target.value), 3)} />\n                </li>\n                <li>\n                    <label htmlFor=\"sp-def-ev\">DEF.ATK</label>\n                    <input type=\"number\" name='sp-def-ev' value={(evs && evs[4].toString()) || 0} className=\"mod-input\" min='0' max='252'\n                        onChange={(e) => setEVState(Number(e.target.value), 4)} />\n                </li>\n                <li>\n                    <label htmlFor=\"spd-ev\">SPD</label>\n                    <input type=\"number\" name='spd-ev' value={(evs && evs[5].toString()) || 0} className=\"mod-input\" min='0' max='252'\n                        onChange={(e) => setEVState(Number(e.target.value), 5)} />\n                </li>\n            </ul>\n            <ul className=\"other-vars\">\n                <label htmlFor=\"nature-select\">Nature</label>\n                <Select\n                    options={natureOptions()}\n                    value={{ value: nature || '', label: (nature && nature.toUpperCase()) || '' }}\n                    onChange={(option) => setNature(option.value)}\n                    isSearchable\n                    className='nature-select var-select'\n                />\n                <label className='item-select-label' htmlFor=\"item-select\">Held Item</label>\n                <Select\n                    options={itemOptions(itemList)}\n                    value={{ value: item || '', label: (item && item.toUpperCase()) || '' }}\n                    onChange={(option) => setItem(option.value)}\n                    className='item-select var-select'\n                />\n                <label htmlFor=\"ability-select\">Ability</label>\n                <Select\n                    options={abilityOptions(info)}\n                    value={{ value: ability || '', label: (ability && ability.toUpperCase()) || '' }}\n                    onChange={(option) => setAbility(option.value)}\n                    className='ability-select var-select'\n                />\n            </ul>\n            <br />\n            <label htmlFor=\"moveset-select\">Moveset</label>\n            <Select\n                options={info && moveOptions(info)}\n                isMulti\n                isSearchable\n                value={(moveset && presetMoveset()) || ''}\n                onChange={(option) => handleMovesetChange(option)}\n            />\n            {info && pokemon && <StatChart height={250} width={350} level={level} ivs={ivs} evs={evs} nature={nature} />}\n            <button className=\"waves-effect waves-light btn green darken-3 confirm-edit\" onClick={handleSubmit}>Confirm</button>\n            <button className=\"waves-effect waves-light btn red darken-3 confirm-edit\" onClick={handleDelete}>Delete</button>\n        </div>\n    )\n\n}\n\nexport default TeamPokemonInfo;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLazyQuery, useMutation, useQuery } from 'react-apollo';\nimport TeamPokemonInfo from '../components/teams/TeamPokemonInfo';\nimport { getCookie } from '../App';\nimport { getTeamPokemonInfo } from '../actions';\nimport { renderLoading } from '../components/Loading';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport { addTeamMutation, getTeamsQuery, editTeamMutation, getPokemonQuery, deleteTeamMutation } from '../queries/teamQueries';\n\nconst TeamIndex = () => {\n\n    // Get JWT\n    const token = getCookie();\n\n    // Redux State\n    const dispatch = useDispatch();\n\n\n    // Temporary States for Queries\n    const [pokemonId, setPokemonId] = useState(0);\n    const [teamName, setTeamName] = useState(\"\");\n\n    // Mutations\n    const [addTeam] = useMutation(addTeamMutation);\n    const [editTeam] = useMutation(editTeamMutation);\n    const [deleteTeam] = useMutation(deleteTeamMutation);\n\n    // Queries\n    const { data, loading } = useQuery(getTeamsQuery, {\n        variables: {\n            userId: token\n        }\n    });\n\n    const [getPokemon] = useLazyQuery(getPokemonQuery, {\n        variables: {\n            id: pokemonId\n        },\n        onCompleted: data => {\n            const { pokemon } = data;\n            dispatch(getTeamPokemonInfo(pokemon))\n        }\n    })\n\n    // Delete Team\n    const handleDeleteTeam = (id) => {\n        deleteTeam({\n            variables: {\n                id: id\n            },\n            refetchQueries: [\n                {\n                    query: getTeamsQuery,\n                    variables: {\n                        userId: token\n                    }\n                }\n            ]\n        })\n    }\n\n    // gets information of selected pokemon\n    const handlePokemonSelect = (id) => {\n        setPokemonId(id)\n        getPokemon();\n    }\n\n    // renders all existing teams belonging to the user\n    const renderExistingTeams = () => {\n        const { allTeamsByUser } = data;\n        return allTeamsByUser.map((team) => {\n            const { name, id, pokemon } = team;\n            return (\n                <div id={id} key={name} className=\"team-container\">\n                    <div className=\"name-container\">\n                        <input className=\"team-name\" id={id} defaultValue={name}\n                            onFocus={(e) => setTeamName(e.target.value)}\n                            onChange={(e) => setTeamName(e.target.value)}\n                            onBlur={(e) => editTeamInfo(e.target.id)}\n                        />\n                    </div>\n                    <div className=\"team-pokemon\">\n                        {renderPokemonList(pokemon)}\n                    </div>\n                    <div className=\"delete-button-container\">\n                        {allTeamsByUser.length > 1 && <button id={id} className=\"waves-effect waves-light btn-small red darken-3  delete-team\" onClick={(e) => handleDeleteTeam(e.currentTarget.id)}>Delete Team</button>}\n                        {allTeamsByUser.length > 1 &&  <FontAwesomeIcon icon={faTrashAlt} id={id} className=\"trash-icon fa-sm\" onClick={(e) => handleDeleteTeam(e.currentTarget.id)} />}\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    // renders all pokemon in the team\n    const renderPokemonList = (pokemonList) => {\n        return pokemonList.map((pokemon) => {\n            const { name, id } = pokemon;\n            if (name) {\n                return (\n                    <div key={id} className=\"add-pokemon\">\n                        <img src={`https://img.pokemondb.net/artwork/${name}.jpg`} alt={name} onClick={() => handlePokemonSelect(id)} />\n                    </div>\n                )\n            }\n            else {\n                return (\n                    <div key={id} className=\"add-pokemon\" onClick={() => handlePokemonSelect(id)}>\n                        +\n                    </div>\n                )\n            }\n        })\n    }\n\n    // edits the team info in the database\n    const editTeamInfo = (id) => {\n        editTeam({\n            variables: {\n                id,\n                name: teamName\n            },\n            refetchQueries: [\n                {\n                    query: getTeamsQuery,\n                    variables: {\n                        userId: token\n                    }\n                }\n            ]\n        })\n    }\n\n\n    // adds a new team in the database\n    const addNewTeam = () => {\n        const defaultName = `Team ${document.querySelectorAll('.team-container').length + 1}`\n        const name = defaultName\n        addTeam({\n            variables: {\n                name,\n                userId: token\n            },\n            refetchQueries: [\n                {\n                    query: getTeamsQuery,\n                    variables: {\n                        userId: token\n                    }\n                }\n            ]\n        })\n    }\n\n    return (\n        <div className=\"team-index\">\n            <div className=\"teams\">\n                <h1>My Teams</h1>\n                {loading && renderLoading()}\n                {data && renderExistingTeams()}\n                <div className=\"add-team-container\"></div>\n                <button className=\"waves-effect waves-light btn red darken-1 add-team\" onClick={addNewTeam} >Add Team</button>\n            </div>\n            { pokemonId && <TeamPokemonInfo />}\n        </div>\n    )\n}\n\nexport default TeamIndex;","import React from 'react';\n\n// Page that displays if only unauthorized user tries to access a page\nconst Forbidden = () => {\n    return (\n        <div className=\"forbidden\">\n            <div className=\"forbidden-message\">\n                <h1>Forbidden Not Authorized</h1>\n                <p>You must be logged in to view this page</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Forbidden;","import React from 'react';\nimport { Switch, Route } from 'react-router'\nimport Home from '../pages/Home'\nimport PokemonIndex from '../pages/PokemonIndex';\nimport MoveIndex from '../pages/MoveIndex';\nimport AbilityIndex from '../pages/AbilityIndex';\nimport ItemIndex from '../pages/ItemIndex';\nimport SignUp from '../pages/SignUp';\nimport Login from '../pages/Login';\nimport TeamIndex from '../pages/TeamIndex';\nimport { useSelector } from 'react-redux';\nimport Forbidden from '../pages/Forbidden';\n// import Unknown from '../pages/Unknown';\n// import DamageCalc from '../pages/DamageCalc';\n\n\nconst Routes = () => {\n    const loggedIn = useSelector(state => state.loggedIn)\n    return (\n        <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/pokemon\" component={PokemonIndex} />\n            <Route path=\"/moves\" component={MoveIndex} />\n            <Route path=\"/abilities\" component={AbilityIndex} />\n            <Route path=\"/items\" component={ItemIndex} />\n            <Route path=\"/signup\" component={SignUp} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/teams\" component={(loggedIn && TeamIndex) || Forbidden} />\n            {/* <Route path=\"\" component={Unknown} /> */}\n            {/* <Route path=\"/damagecalc\" component={DamageCalc} /> */}\n        </Switch>\n    )\n}\n\nexport default Routes;","import './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Navbar from './components/Navbar'\nimport Routes from './config/routes';\nimport { useDispatch } from 'react-redux'\nimport { logIn } from './actions';\n\n\n\nexport const getCookie = () => {\n  const cookie = document.cookie.split('; ')\n  const token = cookie.find(value => /^jwtToken=/.test(value));\n  if(token) return token.slice(9);\n  else return undefined;\n}\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  headers: {\n    authorization: `JWT ${getCookie() || ''}`\n  }\n})\n\n\n\nfunction App() {\n\n  // cache storage expiration and refresh\n  const timeout = 1000 * 10 * 60 * 12;\n  const currentTime = new Date().getTime();\n  const localTime = localStorage.getItem('local-time')\n  if (localTime) {\n    const ttl = Number(currentTime) - parseInt(localTime)\n    if (ttl > timeout) {\n      localStorage.removeItem('local-time')\n      localStorage.removeItem('pokemon-list-data')\n      localStorage.removeItem('abilities-data')\n      localStorage.removeItem('moves-data')\n      localStorage.removeItem('items-data')\n    }\n  }\n  else {\n    localStorage.setItem('local-time', JSON.stringify(currentTime))\n  }\n\n  const dispatch = useDispatch();\n\n  const cookie = document.cookie.split('; ')\n  if(cookie.find(value => /^jwtToken=/.test(value))) dispatch(logIn())\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Navbar />\n        <Routes />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const pokemonReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'POKEMON_LIST_DATA':\n           return [ ...action.payload]\n        case 'POKEMON_SEARCH_DATA':\n            const foundPokemon = [];\n            const allPokemon = JSON.parse(localStorage.getItem('pokemon-list-data'))\n            const regexp = new RegExp(`${action.payload}`)\n            allPokemon.forEach((pokemon) => {\n                if(pokemon.name.match(regexp)) foundPokemon.push(pokemon)\n            });\n            return foundPokemon\n        default:\n            return state\n    }\n}\n\nexport default pokemonReducer;","const infoReducer = (state = '', action) => {\n    switch(action.type) {\n        case 'POKEMON_INFO_DATA':\n           return action.payload\n        default:\n            return state\n    }\n}\n\nexport default infoReducer;","const loadingReducer = (state = '', action) => {\n   switch (action.type) {\n      case 'START_LOADING':\n         return true\n      case 'STOP_LOADING':\n         return false\n      default:\n         return state\n   }\n}\n\nexport default loadingReducer;","const speciesReducer = (state = '', action) => {\n    switch(action.type) {\n        case 'POKEMON_SPECIES_DATA':\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport default speciesReducer;","const movesReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'MOVES_LIST_DATA':\n           return [ ...action.payload]\n        case 'MOVES_SEARCH_DATA':\n            const foundMoves = [];\n            const allMoves = JSON.parse(localStorage.getItem('moves-data'))\n            const regexp = new RegExp(`${action.payload}`)\n            allMoves.forEach((moves) => {\n                if(moves.name.match(regexp)) foundMoves.push(moves)\n            });\n            return foundMoves\n        default:\n            return state\n    }\n}\n\nexport default movesReducer;","const moveInfoReducer = (state = '', action) => {\n    switch(action.type) {\n        case 'MOVE_INFO_DATA':\n           return action.payload\n        default:\n            return state\n    }\n}\n\nexport default moveInfoReducer;","const evolutionChainReducer = (state = \"\", action) => {\n    switch(action.type) {\n        case 'POKEMON_EVOLUTION_DATA':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default evolutionChainReducer;","const abilitesReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'ABILITY_LIST_DATA':\n           return [...action.payload]\n        case 'ABILITY_SEARCH_DATA':\n            const foundAbility = [];\n            const allAbilities = JSON.parse(localStorage.getItem('abilities-data'))\n            const regexp = new RegExp(`${action.payload}`)\n            allAbilities.forEach((ability) => {\n                if(ability.name.match(regexp)) foundAbility.push(ability)\n            });\n            return foundAbility\n        default:\n            return state\n    }\n}\n\nexport default abilitesReducer;","const abilityInfoReducer = (state = '', action) => {\n    switch(action.type) {\n        case 'ABILITY_INFO_DATA':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default abilityInfoReducer;","const itemsReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'ITEM_LIST_DATA':\n           return [...action.payload]\n        case 'ITEM_SEARCH_DATA':\n            const foundItem = [];\n            const allItems = JSON.parse(localStorage.getItem('items-data'))\n            const regexp = new RegExp(`${action.payload}`)\n            allItems.forEach((item) => {\n                if(item.name.match(regexp)) foundItem.push(item)\n            });\n            return foundItem\n        default:\n            return state\n    }\n}\n\nexport default itemsReducer;","const itemInfoReducer = (state = '', action) => {\n    switch(action.type) {\n        case 'ITEM_INFO_DATA':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default itemInfoReducer;","const moveInfoReducer = (state = false, action) => {\n    switch(action.type) {\n        case 'LOG_IN':\n           return true;\n        case 'LOG_OUT':\n            return false;\n        default:\n            return state\n    }\n}\n\nexport default moveInfoReducer;","const teamPokemonReducer = (state = '', action) => {\n    switch(action.type) {\n        case 'TEAM_POKEMON_INFO_DATA':\n           return action.payload\n        case 'CLEAR_POKEMON_INFO_DATA':\n            return ''\n        default:\n            return state\n    }\n}\n\nexport default teamPokemonReducer;","import pokemonReducer from './pokemonReducer';\nimport infoReducer from './infoReducer';\nimport loadingReducer from './loadingReducer';\nimport speciesReducer from './speciesReducer';\nimport movesReducer from './movesReducer';\nimport moveInfoReducer from './moveInfoReducer';\nimport evolutionChainReducer from './evolutionChainReducer';\nimport abilitesReducer from './abilitiesReducer';\nimport abilityInfoReducer from './abilityInfoReducer';\nimport itemsReducer from './itemsReducer';\nimport itemInfoReducer from './itemInfoReducer';\nimport loggedInReducer from './LoggedInReducer';\nimport teamPokemonInfoReducer from './teamPokemonInfoReducer';\nimport {combineReducers} from 'redux'\n\nconst allReducers = combineReducers({\n    pokemon: pokemonReducer,\n    info: infoReducer,\n    loading: loadingReducer,\n    speciesInfo: speciesReducer,\n    moves: movesReducer,\n    moveInfo: moveInfoReducer,\n    evolutionChain: evolutionChainReducer,\n    abilities: abilitesReducer,\n    abilityInfo: abilityInfoReducer,\n    items: itemsReducer,\n    itemInfo: itemInfoReducer,\n    loggedIn: loggedInReducer,\n    teamPokemonInfo: teamPokemonInfoReducer,\n});\n\nexport default allReducers","import allReducers from '../reducers'\nimport {compose} from 'redux'\nimport thunk from 'redux-thunk'\nimport {createStore, applyMiddleware} from 'redux';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  || compose;\n\nconst store = createStore(\n    allReducers,\n    composeEnhancer(applyMiddleware(thunk)),\n    )\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport store from './store'\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}